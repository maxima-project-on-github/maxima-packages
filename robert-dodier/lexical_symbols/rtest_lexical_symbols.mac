(if not member (global, features)
   then load ("lexical_symbols.mac"),
 0);
0;

/* examples from blex.lisp
;; blex ([n:100], f(x) := n : n + x, g() := display(n));
 */

block ([n: 100], f(x) := n: n + x, g() := ldisplay(n), 0);
0;

f(99);
199;

n;
n;

string (?meval (g()));
"[n = 199]";

/* maxima-discuss 2014-08-14: "Allow f(x)(y)"

g(x) := subst(x, 'x, lambda([y], x + y))$      << simulated lexical scope
g(4) => lambda([y],y+4)
g(4)(5) => 9
 */

/* this already works w/ dynamic scope; include this to ensure it doesn't get messed up */
(g(x) := subst(x, 'x, lambda([y], x + y)), string(%%))$
"g(x):=subst(x,'x,lambda([y],x+y))";

string(g(4));
"lambda([y],y+4)";

g(4)(5);
9;

/* reimplement w/ lexical scope */
(g(x) := lambda([y], x + y), string(%%))$
"g(x):=lambda([y],x+y)";

string(g(4));
"closure([x:4],lambda([y],x+y))";

g(4)(5);
9;

/* maxima-discuss 2017-03-17: "Functions as parameters to lambda"

  square(f) := lambda([x],(f(x))^2);
  g:square(sin);
  g(0.1);

but the result is f^2(0.1) and not (sin(0.1))^2.
 */

/* verify f is captured in lexical environment */

(kill(f, g),
 square(f) := lambda([x],(f(x))^2),
 g:square(sin),
 string(%%));
"lambda([x],f(x)^2)";

g(1);
sin(1)^2;

/* maxima-discuss 2017-03-17: "Functions as parameters to lambda"

(%i3)   square(f) := buildq([f], lambda([x],(f(x))^2));
  g:square(sin);
  g(0.1);

(%o1) square(f):=buildq([f],lambda([x],f(x)^2))
(g)lambda([x],sin(x)^2)
(%o3) 0.009966711079379185
 */

/* already works, ensure it continues to work */

(kill(f, g),
 square(f) := buildq([f],lambda([x],f(x)^2)),
 g:square(sin),
 string(%%));
"lambda([x],sin(x)^2)";

g(1);
sin(1)^2;

/* maxima-discuss 2017-03-18: "Functions as parameters to lambda"

h: lambda ([b], h2:lambda ([a], a*b), h2(2));
h(3) ->  6

g: lambda ([b], g2:lambda ([a], a*b), g2);
(g(3))(2) -> 2 b
 */

/* verify that b is captured in lexical environment of g2 */

(kill (g, h, a, b),
 h: lambda ([b], h2:lambda ([a], a*b), h2(2)),
 h(3));
6;

(g: lambda ([b], g2:lambda ([a], a*b), g2),
 g(3)(2));
6;

/* maxima-discuss 2018-09-07: "\"lambda\" should be renamed to something else"

(%i1) lambda([f], lambda([x], [f, x]))(g)(y);
(%o1)                               [f, y]
 */

/* verify that f is captured in the lexical environment of the inner lambda */

(kill(x, y, f, g),
 lambda([f], lambda([x], [f, x]))(g)(y));
[g, y];

/* maxima-discuss 2018-09-08: "\"lambda\" should be renamed to something else"

f: block([private:0],lambda([],private:private+1))

In true lexical scope, this is a closure with the following behavior:

      [f(), f(), f()] => [1,2,3]

And of course it doesn't matter if there are other variables named
"private":

      block( [private:100], [f(),private:200,f()]) => [4,200,5]
 */

/* verify that private captured in the lexical environment of lambda
 * verify that global private and lexical private are distinguished
 */

(kill(private, f),
 f: block([private:0],lambda([],private:private+1)),
 string(f));
"lambda([],private:private+1)";

[f(), f(), f()];
[1, 2, 3];

block( [private:100], [f(),private:200,f()]);
[4, 200, 5];

(private: 300,
 f());
6;

/* mailing list 2020-01-21: "What do ya do with a leaking symbol?" (tnx Stavros Macrakis) */

(kill (g, foo),
 g(x):= block([gg], gg():=x, 'gg),
 foo: g(23));
closure([env27857], gg);

foo();
23;

g(23)();
23;

(g(x):= block([gg], gg():=x, [gg,'gg,nounify('gg),verbify('gg)]),
 foo: g(12));
closure([env27880], [gg, gg, g27871, gg]);

foo[1]();
12;

foo[2]();
12;

foo[3]();
g27871();

foo[3](), nouns;
12;

foo[4]();
12;

(g(x) := block([gg], gg() := x, gg),
 g(34)());
34;

(g(x) := block([gg], gg() := x, 'gg),
 g(34)());
34;

(g(x) := block([gg], gg() := x, nounify('gg)),
 g(34)());
g28051();

(g(x) := block([gg], gg() := x, nounify('gg)),
 ev (g(34)(), nouns));
34;

(g(x) := block([gg], gg() := x, verbify('gg)),
 g(34)());
34;

(g(x) := block([gg], part(gg() := x, 1, 0)),
 g(34)());
34;

(g(x) := lambda([],x),
 g(23)());
23;

(kill (uu),
 uu(z) := block([z : z], lambda([], z)),
 uu(34)());
34;

(kill (vv, globalfun),
 vv(z):=globalfun:lambda([],z),
 vv(42));
closure([env28186], lambda([], z));

vv(42)();
42;

/* fails test at present (March 2020) */
globalfun;
closure([env28186], lambda([], z));

/* fails test at present (March 2020) */
globalfun();
42;

/* mailing list 2020-07-19: "bad evaluation" */

foo: block([w:[a,b,c]],if w[1]>0 then w[2] else w[3]);
closure([env123], if a > 0 then w[2] else w[3]);

(a: -100, ev (foo));
c;

/* implementation of function "twice" (call function twice)
 * "Lisp benefits against other functional programming languages", 2004-09-26
 * found at: http://www.44342.com/lisp-f861-t3560-p1.htm
 * apparently "Programming and Web Development Forums",
 * http://www.44342.com/viewforum-861.htm
 */

/* this business about "looks like" via string matching is a concession
 * to the difficulty of expression matching on closures ...
 * I might try again to figure out a way to make that work.
 */

(looks_like (pattern, e, s) :=
    (ssubst (rhs (e), lhs (e), sanitize_for_regex (pattern)),
     regex_match (%%, s),
     if %% # false then true else FAILED_MATCH (pattern, e, s)),
 sanitize_for_regex (s) :=
     sconcat ("^", sanitize_for_regex_1 (["[", "]", "(", "|", ")", "*", "+", "?"], s), "$"),
 sanitize_for_regex_1 (l, s) :=
     if l = [] then s
         else sanitize_for_regex_1 (rest (l), ssubst (sconcat ("\\", first (l)), first (l), s)),
 0);
0;
     
(twice(f) := lambda([[a]], apply(f, apply(f, a))),
 foo: lambda ([x, y], [x*y, x + y]),
 twicefoo: twice (foo),
 string (%%),
 looks_like ("closure([?envnnnn],lambda([[a]],apply(f,apply(f,a))))", "nnnn" = "[0-9][0-9]*", %%));
true;

twicefoo (1, 3);
[12, 7];

/* so far, so good, recheck a few things */

(string (get_env (first (first (twicefoo)))),
 looks_like ("?envnnnn = [f = lambda([x,y],[x*y,x+y])]", "nnnn" = "[0-9][0-9]*", %%));
true;

foo(1, 3);
[3, 4];

foo(3, 4);
[12, 7];
