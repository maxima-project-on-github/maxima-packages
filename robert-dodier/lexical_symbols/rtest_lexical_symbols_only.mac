/* Lexical symbols only, environments not coming into play.
 */

(if not member (global, features)
   /* ONLY LOAD LEXICAL_SYMBOLS.LISP HERE, NOT OTHER STUFF FOR ENVIRONMENTS */
   then load ("lexical_symbols.lisp"),
 0);
0;

/* Contrived examples. */

/* verify that named functions (f(x), f[x], f[x](y)) and unnamed functions,
 * block, and for loops ('for i thru ...' and 'for x in ...')
 * all work as expected: their local variables are lexical symbols.
 */

/* named functions -- f(x) */

(kill(b),
 b(c, a) := a - c,
 h(b, c, z) := b(c, z),
 h(lambda([c, a], a + c), 222, 555));
777;

(kill(d, e),
 d[m] := 2^m,
 e[7]: 888,
 g(d, k) := d[k],
 g(e, 7));
888;

(kill(u, v),
 u[m](n) := m^n,
 h(u, v) := u[3](v),
 h([lambda([w], 1 + w), lambda([w], 2 + w), lambda([w], 3 + w)], 9));
12;

(kill(f, a, b, x, y),
 f(x, y) := [x, y] :: [y, x],
 f(a, b));
[b, a];

/* named functions -- f[x] */

(kill(a, b),
 a[b] := b[3],
 b[3]: 1729,
 z: [11, 22, 33],
 a[z]);
33;

arrayinfo (a);
[hashed, 1, [[11, 22, 33]]];
 
listarray (a);
[33];

(c[3]: 123,
 a[c]);
123;

arrayinfo (a);
[hashed, 1, [[11, 22, 33]], [c]];
 
listarray (a);
[33, 123];

/* named functions -- f[x](y) */

/* f[x](y) is first evaluated for x, yielding an expression in y,
 * and then a lambda expression with that as the body is stored as f[x].
 * Ensure that both x and y are lexical symbols.
 */

(kill(u, v, w, x, y, z),
 x[u](v, w) := v(u(1)) + w(u(1)),
 u(z) := 10*z,
 v(u) := 100*u,
 w(v) := 1000*v,
 x[lambda([y], 3 - y)](y, z));
y(2) + z(2);

/* unnamed functions */

(a[3]: 456,
 lambda ([a], a[3]) ([11, 22, 33, 44]));
33;

/* block */

(kill (f),
 f(x) := x + 1,
 block ([f], f: lambda([x], x - 2), f(10)));
8;

/* for i thru ... */

/* loop index is just a number, so array or function properties aren't relevant ...
 * here's a contrived example.
 */

(kill(i),
 declare(i, complex),
 for i thru 1 do if featurep(i, complex) then return(1) else return(0));
0;

(foo: featurep(i, complex),
 kill(i),
 foo);
true;

/* for x in ... */

(x(z) := 123,
 y: [],
 for x in [sin, cos, tan] do push (x(1), y),
 y);
[tan(1), cos(1), sin(1)];

/* Lexical symbol 'a' is distinct from global 'a',
 * unless 'a' is declared global.
 *
 * HOWEVER, note that 'a' is not declared global at the time block([a], ...) is parsed
 * in (declare(a, integer), block([a], featurep(a, integer)))
 * (i.e., both expressions within MPROGN).
 * Therefore the result is 'false'. In order for block([a], featurep(a, integer))
 * to know about declare(a, integer), the declaration must be evaluated before
 * the block is parsed.
 */
(declare (a, integer),
 block ([a], featurep (a, integer)));
false;

/* block([a], ...) is parsed BEFORE declare(a, ...) is evaluated. */
(declare (a, global),
 block ([a], featurep (a, integer)));
false;

/* block([a], ...) is parsed AFTER declare(a, ...) is evaluated. */
block([a], featurep (a, integer));
true;

/* A lexical symbol can have a declared property. */

/* Separate block([a], ...) from declare(a, ...) to ensure declaration is in effect
 * when the block is parsed. See HOWEVER above.
 */
(kill (a, b),
 declare (a, integer));
done;

block ([a, b],
       declare (b, integer),
       [featurep (a, integer), featurep (b, integer)]);
[false, true];

featurep (b, integer);
false;

/* examples from blex.lisp
;; blex ([f], f(x) := 2*x);
;; blex ([a], h(x) := a[x] : 1, i() := arrayinfo(a));
 */

kill(f, foo);
done;

/* f is a lexical symbol, f1 is global.
 * foo is global, but its value is the lexical symbol f.
 */

(foo: block ([f], f(x) := 2*x, f1(x) := f(x), f), 0);
0;

f(99);
f(99);

f1(99);
198;

foo(99);
198;

/* a is a lexical symbol which is the name of an undeclared (hash) array,
 * h, i, and l are global functions.
 */
block ([a], h(x) := a[x]: 1, i() := arrayinfo(a), l() := listarray(a), 0);
0;

[h(17), h(29), h(1729)];
[1, 1, 1];

/* These are references to global 'a', not lexical 'a'. */

(a[11]: 2,
 a[13]: 2,
 a[17]: 2);
2;

arrayinfo(a);
[hashed, 1, [11], [13], [17]];

listarray(a);
[2, 2, 2];

i();
[hashed, 1, [17], [29], [1729]];

l();
[1, 1, 1];

/* function argument same name as function itself */

(f(f, x) := f(x), 0);
0;

f(sin, 1);
sin(1);

/* Examples collected "in the wild". */

/* maxima-discuss 2014-04-19: "How to make buildq evaluate its first argument - please help"

(%i1) gen_rhs(Ex,Vars)::= block([n:length(Ex),m:length(Vars)],
    Exs:subst(makelist(Vars[i]=y[i,1],i,m),Ex),print(Exs),
    MList:ev(makelist(makelist(Exs[i]),i,m)),print(MList),
    buildq([MList],lambda([t,y],matrix(splice(MList)))))$

(%i2) george : gen_rhs([sin(a+b),cos(a*b)],[a,b])$
[sin(y[2,1]+y[1,1]),cos(y[1,1]*y[2,1])]
[[sin(y[2,1]+y[1,1])],[cos(y[1,1]*y[2,1])]]

(%i3) george(5,z);
(%o3) matrix([sin(z[2,1]+z[1,1])],[cos(z[1,1]*z[2,1])])

(%i4) y[2,7] : 42$

(%i5) george(5,z);
(%o5) matrix([sin(y[2,1]+y[1,1])],[cos(y[1,1]*y[2,1])])
 */

(kill(y, z),
 fred: lambda([t,y],matrix([sin(y[2,1]+y[1,1])],[cos(y[1,1]*y[2,1])])),
 fred(5, z));
matrix([sin(z[2,1]+z[1,1])],[cos(z[1,1]*z[2,1])]);

(y[2,7]: 42,
 fred(5, z));
matrix([sin(z[2,1]+z[1,1])],[cos(z[1,1]*z[2,1])]);

(kill(y, z),
 gen_rhs(Ex,Vars)::=
   block([n:length(Ex), m:length(Vars), y],
         Exs:subst(makelist(Vars[i]=y[i,1],i,m),Ex),
         MList:ev(makelist(makelist(Exs[i]),i,m)),
         /* Call apply here to ensure that y in the lambda argument list
          * is the same y as in MList.
          */
         apply (lambda, [[t, y], apply (matrix, MList)])),
 george : gen_rhs([sin(a+b),cos(a*b)],[a,b]),
 string(george));
"lambda([t,y],matrix([sin(y[2,1]+y[1,1])],[cos(y[1,1]*y[2,1])]))";

george(5, z);
matrix([sin(z[2,1]+z[1,1])],[cos(z[1,1]*z[2,1])]);

(y[2,7]: 42,
 george(5, z));
matrix([sin(z[2,1]+z[1,1])],[cos(z[1,1]*z[2,1])]);

/* maxima-discuss 2014-08-01: "lexical scope and more"

block([?mplus:foo],?mplus(a,a))  -->  2*a
block([ gg:foo],    gg(a,a))     -->  foo(a,a)
 */

kill(foo);
done;

block ([?mplus: foo], ?mplus(a, a));
foo(a, a);

block ([gg: foo], gg(a, a));
foo(a, a);

/* maxima-discuss 2014-08-09: "declared constants cannot be formal parameters"

f(x):=block([n], declare(n,constant)  g(r):=  something-with-n... );
is there a way to preserve this declaration if someone
subsequent does, say,  kill(n);
 */

block ([n], declare (n, constant), g() := constantp (n), 0);
0;

constantp (n);
false;

g();
true;

(kill(n),
 g());
true;

(kill(props),
 g());
false;

/* maxima-discuss 2014-09-06: "Define derivative of discontinue function"

PS. The following is copied from my answer to this question
on Stackoverflow:
http://stackoverflow.com/questions/24892016/maxima-differentiating-a-piecewise-function/25233479#25233479

Here's a different approach using a simplification rule for "if"
expressions. The unsolved part here is to detect discontinuities and
generate delta functions for those locations. If you want to ignore
those, you can define FOO to return 0. Note that I didn't attempt to
implement the function discontinuities; that part is unsolved here.
I can give it a try if there is interest.

(%i1) display2d : false $
(%i2) matchdeclare ([aa, bb, cc], all, xx, symbolp) $
(%i3) 'diff (if aa then bb else cc, xx) $
(%i4) tellsimpafter (''%, apply ("if", [aa, diff (bb, xx), true, diff (cc, xx)]) + FOO (aa, bb, cc, xx)) $
(%i5) FOO (a, b, c, x) := 'lsum ((ev (c, x = d) - ev (b, x = d)) * delta (d, x), d, discontinuities (a, x)) $
(%i6) diff (if x > 0 then x^2 else x^3, x);
(%o6) (if x > 0 then 2*x else 3*x^2)+'lsum((d^3-d^2)*delta(d,x),d,
                                           discontinuities(x > 0,x))
 */

/* maxima-discuss 2014-09-07: "Define derivative of discontinue function"

Roberts (ingenious) tellsimpafter solution (http://stackoverflow.com/questi=
ons/24892016/maxima-differentiating-a-piecewise-function/25233479#25233479)=
 gives:

    (%i4) diff(if x^2 < 1 then x^3 else x,x);
    (%o4) if x^2<1 then 3*x^2 else 1

Not OK:

    (%i5) diff(if aa^2 < 1 then aa^3 else aa,aa);
    (%o5) if (aa^2<1)^2<1 then 3*(aa^2<1)^2 else 1

 */

block ([aa, bb, cc, xx],
       matchdeclare ([aa, bb, cc], all, xx, symbolp),
       'diff (if aa then bb else cc, xx),
       apply (tellsimpafter, [%%, '(apply ("if", [aa, diff (bb, xx), true, diff (cc, xx)]) + FOO (aa, bb, cc, xx))]),
       FOO (a, b, c, x) := 'lsum ((subst (x = d, c) - subst (x = d, b)) * delta (d, x), d, discontinuities (a, x)),
       diff (if x > 0 then x^2 else x^3, x));
(if x > 0 then 2*x else 3*x^2)+'lsum((d^3-d^2)*delta(d,x),d, discontinuities(x > 0,x));

diff(if x^2 < 1 then x^3 else x,x);
(if x^2 < 1 then 3*x^2 else 1)+'lsum((d-d^3)*delta(d,x),d, discontinuities(x^2 < 1,x));

diff(if aa^2 < 1 then aa^3 else aa,aa);
(if aa^2 < 1 then 3*aa^2 else 1)+'lsum((d-d^3)*delta(d,aa),d, discontinuities(aa^2 < 1,aa));

/* maxima-discuss 2014-11-10: "question on poltting absolut values"

   - What about lambda-bindings? Can assume(x>0) affect all functions with
   x as a formal? In our current system, lambda([x]...) does *not* create a
   new variable: assume(x>0)$ lambda([x],is(x>0)) => true. In principle, this
   should really be a different x.
 */

(kill (x, y, f, g, h, i),
 myctxt: newcontext (),
 assume ('x > 0),
 f: lambda ([], is ('x > 0)),
 g: lambda ([x], is ('x > 0)),
 h() := is ('x > 0),
 i(x) := is ('x > 0),
 0);
0;

f();
true;

g(1);
unknown;

h();
true;

i(1);
unknown;

block ([x], assume (x < 0), is (x > 0));
false;

declare (y, global);
done;

(assume ('y > 0),
 f: lambda ([], is ('y > 0)),
 g: lambda ([y], is ('y > 0)),
 h() := is ('y > 0),
 i(y) := is ('y > 0),
 0);
0;

f();
true;

g(1);
true;

h();
true;

i(1);
true;

block ([y], is (y > 0));
true;
 
(killcontext (myctxt), 0);
0;

/* maxima-discuss 2014-12-22: "Unexpected behavior (no global/local decoupling) when passing a function name as a parameter to another function"

    kill(all)$
    fun(h):=diff(h(x,y),x)+diff(h(x,y),y)$
    h0(x,y):=sin(x)*cos(y)$
    fun(h0);

correctly returns:

    cos(x)*cos(y)-sin(x)*sin(y)

However, by interposing a global definition of "h":

    kill(all)$
    fun(h):=diff(h(x,y),x)+diff(h(x,y),y)$
    h0(x,y):=sin(x)*cos(y)$
    h(x,y):=x*y$ /*<<<<<<<<<<<<<<<<<<*/
    fun(h0);

we obtain:

    y+x

which points out that a global definition of "h" overrides the parameter passed to the function.

Such behavior is inconsistent with the case of a non-functional parameter, i.e.

         kill(all)$
    fun(h):=diff(h,x)+diff(h,y)$
    h0:sin(x)*cos(y)$
    h:x*y$ /*<<<<<<<<<<<<<<<<<<*/
    fun(h0);

which returns:

    cos(x)*cos(y)-sin(x)*sin(y)
 */

(fun(h):=diff(h(x,y),x)+diff(h(x,y),y),
 h0(x,y):=sin(x)*cos(y),
 fun(h0));
cos(x)*cos(y)-sin(x)*sin(y);

(h(x,y):=x*y, /*<<<<<<<<<<<<<<<<<<*/
 fun(h0));
cos(x)*cos(y)-sin(x)*sin(y);

(fun(h):=diff(h,x)+diff(h,y),
 h0:sin(x)*cos(y),
 h:x*y, /*<<<<<<<<<<<<<<<<<<*/
 fun(h0));
cos(x)*cos(y)-sin(x)*sin(y);

/* maxima-discuss 2015-06-03: "Apply function under the summation sign"

expr:'sum(x**i,i,1,3);
L(x):= block(
    g(y):=y**2,
    if operatorp(x,nounify(sum)) then block(
        summand: args(x)[1],
        apply(sum,subst(g(summand),summand,args(x)))
        ));

L(expr);
=> 'sum(x^i,i,1,3))^6+('sum(x^i,i,1,3))^4+('sum(x^i,i,1,3))^2

If I call apply(sum,subst(g(summand),summand,args(x))) outside of the
function it works as expected.
 */

(expr:'sum(x**i,i,1,3),
 L(x):= block([g],
    g(y):=y**2,
    if operatorp(x,nounify(sum)) then block([summand],
        summand: args(x)[1],
        apply(sum,subst(g(summand),summand,args(x))))),
 L(expr));
x^2 + x^4 + x^6;

/* maxima-discuss 2015-11-25: "preventing names of algebraic symbols from conflicting with local variables?"

Z : [k,k];
f(A):=sum(A[k],k,1,2);
f(Z);

[...] he expects the result of the third line to be 2*k, when in fact he gets 3.
 */

(Z: [k, k],
 /* sum was supposed to make its index a lexical symbol,
  * but that got lost somewhere along the way in 2005 ...
  * anyway by explicitly making k a lexical symbol, 
  * we can get the expected result.
  *   #summationindexscope
  */
 f(A) := block ([k], sum(A[k],k,1,2)),
 f(Z));
2*k;

/* HMM, SOUNDS INTERESTING BUT I DON'T SEE AN EXAMPLE HERE
maxima-discuss 2016-02-28: "Lambda functions and dynamic scoping"

    K(b,a,k) :=  block([p,q,p1:1,p2:0,q1:0,q2:1],
      for n:1 thru k do (
        p:bfloat(a(n)*p2+b(n)*p1),
        q:bfloat(a(n)*q2+b(n)*q1),
        p1:p2, p2:p, q1:q2, q2:q), p/q);

For instance, Brouncker's continued fraction for 4/pi would be

  1 + K( lambda([n], (2*n-1)^2), lambda([n], 2), 512);

[...] Yesterday, I got in trouble because I had to compute something as:

  f(k, x) := K( lambda([n], ... stuff with k, n, x ... etc.
 */

/* maxima-discuss 2016-03-16: "Maxima function changes behavior depending on the NAME of its parameter"

f(cos,x) :=  cos(x);

f(sin,x);

Should that compute sin(x)?

what about  f(lambda([x],x) ,cos(x))?
 */

(f(cos, x) := cos(x),
 f(sin, x));
sin(x);

f(lambda ([x], x), cos(x));
cos(x);

/* maxima-discuss 2016-03-15: "Maxima function changes behavior depending on the NAME of its parameter"

The function call does not give the desired result, although it should. And the strange things are:

- Changing the name of the parameter of function mmetric from g to anything else, e.g. k, will make the function call give the correct result.

- Alternatively, deleting code block 3 will also make the program give the correct result, so does a "kill (g)" prior to the function call.

- Alternatively, changing in code block 3 the indices a,b,c to 1,2,3 will also make the function call give the correct result.

One would expect that the local parameter g is independent of the global variables g[a],g[b],g[c]. But the contrary
seems to be the case. There is some strange interdependency. Does anyone have an explanation? Is this a bug, or is it a
situation one should avoid, because it causes these side effects? What is the general issue behind that?

/* 1. Location vector R (column vector) in terms of cylindrical coordinates: */

R: covect([r*cos(phi),r*sin(phi),z]);

/* 2. Compute tangent vectors and assign them to h[1 .. ,2 .. ,3]: */

h[1]: diff(R,r);
h[2]: diff(R,phi);
h[3]: diff(R,z);

/* 3. Also assign the results to g[a .. ,b .. ,c]: */

g[a]: h[1];
g[b]: h[2];
g[c]: h[3];

/* 4.  */

arrayinfo(g);
arrayinfo(h);

/* 5. Define function to compute the metric */

mmetric(g) := block([a,b,dim,gij],
    dim: length(g[1]),
    /* print intermediate result */
    print("dim = ",dim),
    gij: zeromatrix(dim,dim),
    for a: 1 thru dim do
        for b:1 thru dim do
            gij[a,b]: g[a].g[b],
    trigsimp(gij)
)$

/* 6.  */

length(h[1]);

/* 7. Call function mmetric with argument h */

h[ij]: mmetric(h);
 */

(columnvector(x):=transpose(matrix(x)),
 covect(x):=columnvector(x),
 kill (R, r, phi, z, h, g, a, b, c, mmetric),
 /* 1. */
 R: covect([r*cos(phi),r*sin(phi),z]),
 /* 2. */
 h[1]: diff(R,r),
 h[2]: diff(R,phi),
 h[3]: diff(R,z),
 [h[1], h[2], h[3]]);
[matrix([cos(phi)], [sin(phi)], [0]),
 matrix([-r*sin(phi)], [r*cos(phi)], [0]),
 matrix([0], [0], [1])];

 /* 3. */
(g[a]: h[1],
 g[b]: h[2],
 g[c]: h[3],
 /* 4. */
 [arrayinfo(g), arrayinfo(h)]);
[[hashed, 1, [a], [b], [c]], [hashed, 1, [1], [2], [3]]];

 /* 5. */
(mmetric(g) := block([a,b,dim,gij],
    dim: length(g[1]),
    /* print intermediate result */
    print("dim = ",dim),
    gij: zeromatrix(dim,dim),
    for a: 1 thru dim do
        for b:1 thru dim do
            gij[a,b]: g[a].g[b],
    trigsimp(gij)),
 0);
0;

/* 6.  */
length(h[1]);
3;

/* 7. Call function mmetric with argument h */
h[ij]: mmetric(h);
matrix([1, 0, 0], [0, r^2, 0], [0, 0, 1]);

/* maxima-discuss 2017-08-27: "Bound variables in lambdas only sometimes shadow globals?"

(%i1) a(x) := x;
(%o1)                              a(x) := x

(%i2) b : lambda([x], x);
(%o2)                           lambda([x], x)

(%i3) lambda([a], a())(lambda([], "foo")); /* expecting "foo" */

Too few arguments supplied to a(x); found: []
#0: lambda([a],a())(a=lambda([],"foo"))
 -- an error. To debug this try: debugmode(true);

(%i4) lambda([a], a("bar"))(lambda([], "foo")); /* expecting error */
(%o4)                                 bar
 */

/* verify that global a and lexical a are distinguished */

(kill(a, b),
 a(x) := x,
 b : lambda([x], x),
 lambda([a], a())(lambda([], "foo")));
"foo";

/* wrong number of arguments error expected here */
errcatch (lambda([a], a("bar"))(lambda([], "foo")));
[];

/* maxima-discuss 2017-08-28: "Bound variables in lambdas only sometimes shadow globals?"

a:23$
f(a) := g()$
g():= print(a)$

With lexical binding, f(7) prints 23, the global value.

With dynamic binding, f(7) prints 7.

And with dynamic binding, ( f(7), g() )  prints 7 then 23, not 7 then 7,
 */

/* verify that global a and lexical a are distinguished */

(kill(a, f, g, l),
 a:23,
 f(a) := g(),
 l: [],
 g() := push (a, l),
 f(7),
 l);
[23];

(l: [],
 (f(7), g()),
 l);
[23, 23];

/* maxima-discuss 2017-11-03: "Free-variable capture in Maxima, was: Evaluate derivative at a point with ev"

    x:0$
    f(x):=g(47)$
    g(y) := x$       <<< x here is a "free" variable because there is no
visible surrounding declaration

then

      f(23) => 23  because when g(47) is called, x is bound to 23

but if g is called from the top level, it returns a different value:

      g(99) => 0

That is, the value of g(99) may depend on who called it.

This is different from most languages which have what is called "lexical"
or "static" scope. In lexical scope, the "x" in g() is looked up in the
global scope, not in the calling function's (f) scope. In lexical scope,
both f(23) and g() would return 0.
 */

/* verify global x and lexical x are distinguished */

(kill(f, g, x),
 x: 0,
 f(x):=g(47),
 g(y) := x,
 f(23));
0;

g(99);
0;

/* maxima-discuss 2019-03-24: "Questions about compiling"

Point 1:

       f():= block([innerf],  innerf():=23, myf())$
       f() => 23, as expected.
       innerf() => 23 !!! Function definitions are global.

       kill(f,innerf)$
       f():= block([innerf], local(innerf), innerf():=23, innerf())$
       f() => 23, as expected.
       innerf() => innerf()    <<< OK, myf is now local to f

Point 2:

       g() := block( [innerf, var: 23], local(innerf),
                      innerf():=var,
                      block([var: 56], innerf()))$
       g() => 56    <<< follows from dynamic scope rules

*/

/* Point 1: */

/* verify that global innerf and local innerf are distinguished */

(kill(f, innerf),
 f():= block([innerf],  innerf():=23, innerf()),
 f());
23;

innerf();
innerf();

/* already works, ensure it continues to work */

(kill(f, innerf),
 f():= block([innerf], local(innerf), innerf():=23, innerf()),
 f());
23;

innerf();
innerf();

/* Point 2: */

/* var in nested blocks are two distinct symbols */

(g() := block( [innerf, var: 23],
                innerf():=var,
                block([var: 56], innerf())),
 0);
0;

g();
23;


/* maxima-discuss 2019-03-24: "Questions about compiling"

func() := print(3)$
ff():=block([func],func:lambda([],print(88)), func())$
ff() => 3

so, surprisingly perhaps, you still need to use local:

func() := print(3)$
ff():=block([func],local(func), func:lambda([],print(88)), func())$
ff() => 3

or somehow force the value rather than the function value to be used in
this charmingly (?) obscure way:

func() := print(3)$
ff():=block([func], func:lambda([],print(88)), (+func)()) ;
ff() => 88
 */

/* verify that global func and lexical func are distinguished */

(kill(func, ff),
 func() := print(3),
 ff():=block([func],func:lambda([],print(88)), func()),
 ff());
88;

/* already works, ensure it continues to work */

(ff():=block([func],local(func), func:lambda([],print(88)), func()),
 ff());
88;

(ff():=block([func], func:lambda([],print(88)), (+func)()),
 ff());
88;

/* maxima-discuss 2019-05-15: "Scope error with sum"

    f(x) := sum(i*x, i, 1, 5);         (with f(i) = 55 )
will look like an error.
 */

/* Hmm. f returns 15*i only if the summation index i is distinguished from the global i.
 * sum doesn't treat its index as a lexical variable, maybe it should.
 *   #summationindexscope
 */

(kill(f, i),
 f(x) := sum(i*x, i, 1, 5),
 f(j));
15*j;

f(i);
55;

(f(x) := block ([i], sum(i*x, i, 1, 5)),
 f(i));
15*i;

/* dunno what this next example shows about lexical symbols,
 * but anyway let's keep it since it's already done.
 */

/* maxima-discuss 2019-05-25: "Question about defmatch"

find_sin(z):=block([kk:[]], apply1(z,push_on_kk), kk);

push_on_kk(r):= if not(mapatom(r)) and (part(r,0)=sin) then push(r,kk);

example

hh:sin(w)+4*sin(mm);
find_sin(hh);   returns      [sin(w),sin(mm)]
 */

/* verify that functions refer to the same kk */

block ([kk],
  find_sin(z):= (kk: [], apply1(z,push_on_kk), kk),
  push_on_kk(r):= if not(mapatom(r)) and (part(r,0)=sin) then push(r,kk),
  0);
0;

(hh:sin(w)+4*sin(mm),
 find_sin(hh));
[sin(w), sin(mm)];

/* maxima-discuss 2019-05-28: "Advantages of dynamic scoping (was Question about defmatch)"

(%i1)      mod1(value,modulus):=mod(value-1,modulus)+1$
(%i2)      mod1(0,8);
warning: assigning 8, a non-prime, to 'modulus'
(%o2)     8
 */

/* NOT SEEING A DISTINCTION BETWEEN LEXICAL AND DYNAMIC SCOPE HERE.
 * IN EITHER CASE, MODULUS REFERS TO THE GLOBAL SYMBOL
 * (ASSUMING ALL BUILT-IN GLOBAL FLAGS ARE DECLARED GLOBAL IN THE LEXICAL CASE)
 */

/* maxima-discuss 2019-05-28: "Advantages of dynamic scoping (was Question about defmatch)"

bar():=  parse_string("x");

bar()-x
              is that 0?

what about
bar():=block([x:45],parse_string("x"));
 */

/* assume parse_string (and eval_string) work in the global environment; this is subject to discussion !! */

(kill(x),
 bar():=  parse_string("x"),
 bar());
x;

bar() - x;
0;

(bar():=block([x:45],eval_string("x")),
 bar());
x;

bar() - x;
0;

(baz() := block([x], eval_string("x") - x, string(%%)),
 baz());
"x-x";

(x: 99,
 baz() := block([x: 45], eval_string("x") - x),
 baz ());
54;

/* maxima-discuss 2019-09-28: "Symbol collision via MEVAL in integration, was: Problem with fourier"

> load("fourie")$
> fourier(f(t+(t1+T/2)),t,T)$
> fourier(g(t+(t1+T/2)),t,T)$
>
> The fourier series computed for f is very different to that computed for g.
> That for g is what I would have expected.

Renaming f to f% throughout fourie.mac causes fourier to give the
expected for fourier(f(t+(t1+T/2)),t,T). I've pushed commit 4650d2d to
implement that.
 */

/* verify that global f and lexical f are distinguished
 * assume that 4650d2d is reverted
 */

(kill(a, b, f, g, t, t1, T),
 declare (n, global), /* FOURIER LEAKS N !! ASSUMING THAT'S ACCEPTABLE, WHOSE RESPONSIBILITY IS IT TO DECLARE N GLOBAL ?? */
 load(fourie),
 fourier(g(t+(t1+T/2)),t,T),
 ev(%%));
[a[0] = ('limit('integrate(g(t1+t+T/2),t),t,T,minus)-'limit('integrate(g(t1+t+T/2),t),t,-T,plus))/(2*T),
 a[n] = ('limit('integrate(cos((%pi*n*t)/T)*g(t1+t+T/2),t),t,T,minus)
      -'limit('integrate(cos((%pi*n*t)/T)*g(t1+t+T/2),t),t,-T,plus))
      /T,
 b[n] = ('limit('integrate(sin((%pi*n*t)/T)*g(t1+t+T/2),t),t,T,minus)
      -'limit('integrate(sin((%pi*n*t)/T)*g(t1+t+T/2),t),t,-T,plus))
      /T]$

(fourier(f(t+(t1+T/2)),t,T),
 ev(%%));
[a[0] = ('limit('integrate(f(t1+t+T/2),t),t,T,minus)-'limit('integrate(f(t1+t+T/2),t),t,-T,plus))/(2*T),
 a[n] = ('limit('integrate(cos((%pi*n*t)/T)*f(t1+t+T/2),t),t,T,minus)
      -'limit('integrate(cos((%pi*n*t)/T)*f(t1+t+T/2),t),t,-T,plus))
      /T,
 b[n] = ('limit('integrate(sin((%pi*n*t)/T)*f(t1+t+T/2),t),t,T,minus)
      -'limit('integrate(sin((%pi*n*t)/T)*f(t1+t+T/2),t),t,-T,plus))
      /T]$

/* maxima-discuss 2019-11-06: "Interference of a forrmal parameter of a function and a global variable of the same name"

Apply2Part(f, [subexpr]):=block(
    local(f, subexpr),
    apply(substpart, cons(apply(f, [apply(part, subexpr)]), subexpr))
)$

Example:

expr: u=m*r^2*d+m*s^2*g+m*t^2*h;    =>    u=h*m*t^2+g*m*s^2+d*m*r^2
Apply2Part(factor, expr, 2, [1,2]);    =>    u=m*(h*t^2+g*s^2)+d*m*r^2
expr1: u=m*r^2*f+m*s^2*g+m*t^2*h;    =>    u=h*m*t^2+g*m*s^2+f*m*r^2
Apply2Part(factor, expr1, 2, [1,2]);    =>    u=m*(h*t^2+g*s^2)+factor*m*r^2
 */

/* verify that global f and lexical f are distinguished */

(kill(u, m, r, d, s, g, t, h, f),
 Apply2Part(f, [subexpr]):=block(
     apply(substpart, cons(apply(f, [apply(part, subexpr)]), subexpr))),
 expr: u=m*r^2*d+m*s^2*g+m*t^2*h,
 Apply2Part(factor, expr, 2, [1,2]));
u=m*(h*t^2+g*s^2)+d*m*r^2;

(expr1: u=m*r^2*f+m*s^2*g+m*t^2*h,
 Apply2Part(factor, expr1, 2, [1,2]));
u=m*(h*t^2+g*s^2)+f*m*r^2;

/* maxima-discuss 2019-11-19: "concepts vs implementation, was: general proposal to implement lexical" (RJF)

matchdeclare(p1, true);
defrule(r1,m(p1,p1), double(p1));
apply1(m(3,3),r1)  ;

defrule(r2,k(p1),p1(k));
sin:cos;
apply1(k(sin),r2);

/*Easy. */
integrate(sin(x),x);
sum(f(i),i,n,n+1);
sum(n,i,n,n+1);  /* 2*n */
product(n,i,n,n+1);
block([j:0], for j:1 thru 10 do nothing, j);
block([j:10], while j>0 do j:j-1,j);
block([sin:cos], [sin(x),apply(sin,[x])]);


/* more challenging */
block([h:43,ans:[]],kill(f),
  push([1,f(1)],ans),
  f(e):=g(e),
  push([2,f(2)],ans),
  f(r):=block([m:h+r],m),
  push([3,f(3)],ans),
  f(r):=block([h],h+r),
  push([4,f(4)],ans),
  f(r):=block([],h+r),
  push([5,f(5)],ans),
  f(r):=(f(s):=g(r),1776),
  push([6,f(6)],ans),
  push([7,f(7)],ans),

  reverse(ans));

test3(e):=block([x],integrate(x^e,x))$
x^2/2-test3(1);

w(z):=block([numer:true],sin(z));

inv(f,x,y):= solve(f(x)=y,x);
kill(f);
inv(atan,x,y);

gg(f,g):=gradef(f(x),g(x));

gg(foo,bar)   /* fails, define gradient for f, not foo */
 */
 
/* #summationindexscope */ /* I guess this refers to summations above */

/* maxima-discuss 2019-11-19: "general proposal to implement lexical scope + path to Maxima 6.0 version"

A couple of possibly confusing cases:

     f(x):='x returns a symbol which looks like x, but isn't x.

     f(ex,x):=diff(ex,x) works fine
     f(ex,x):=diff(ex,'x) might not work as expected -- if the user expects 'x to be the same ex as in the input expression

 */

/* verify that global x and lexical x are distinguished
 */

(kill(x),
 f(x):='x,
 string (x - f(x)));
"x-x";

f(x) - f(x);
0;

(g(x) := 'x,
 string (g(x) - f(x)));
"x-x";

(kill(u, v, x),
 f(ex,x):=diff(ex,x),
 f(sin(2*u), u));
2*cos(2*u);

(u: 'v,
 f(cos(3*u), u));
-3*sin(3*v);

f(cosh(x), x);
sinh(x);

(f(ex,x):=diff(ex,'x),
 f(cosh(x), x));
0;

/* maxima-discuss 2019-11-20: "Strange behavior of a simple function"

foo(x,y) := x[1] + y[2]$

Now consider a call like foo(a,b). This will give:

a[1]+b[2]

as expected. However, now consider foo(y,a). This will give:

a[1] + a[2]

The correct answer should have been:

y[1] + a[2]

Worse, calling foo(y,x) will make Maxima hang.
 */

/* verify that global x and y are distinguished from lexical x and y */

(kill(x, y, a, b),
 foo(x,y) := x[1] + y[2],
 foo(a, b));
a[1] + b[2];

foo(y, a);
y[1] + a[2];

foo(y, x);
y[1] + x[2];

(bar(x, y) := x(1) + y(2), /* with dynamic scope, same problem observed for functions instead of arrays */
 bar(a, b));
a(1) + b(2);

bar(y, b);
y(1) + b(2);

bar(y, x);
y(1) + x(2);

/* warning message about arguments of hypergeometric
 * no longer occurs because psubstitute is not called.
 * let it stand, seems like a useful example in any case.
 */
 
/* maxima-discuss 2019-11-20: "Re: [Maxima-discuss] general proposal to implement lexical"

(%i4) bob(a,b,c,x) := block([p : [a,b], q : [c]],hypergeometric(p,q,x));
warning: The first two arguments to 'hypergeometric' must be lists.

But function bob seems to work OK

(%i5) bob(2,3,1/2,x);
(%o5) hypergeometric([2,3],[1/2],x)

 */

/* verify that function body is not simplified via gensym substitution
 * try to capture warning message; message is printed by MTELL so it seems like it should work
 */

block ([s: make_string_output_stream ()],
       with_stdout (s, parse_string ("bob(a,b,c,x) := block([p : [a,b], q : [c]],hypergeometric(p,q,x))")),
       get_output_stream_string (s));
"";
 
(bob(a,b,c,x) := block([p : [a,b], q : [c]],hypergeometric(p,q,x)),
 bob(2,3,1/2,x));
hypergeometric([2,3],[1/2],x);

/* warning from hypergeometric comes from bug in commit 14d8251;
 * not supposed to simplify stuff in function body.
 * bug caused by (LET (($SIMP T)) (RESIMPLIFY Z)) in psubstitute -- seems questionable, oh well !!
 */

string (f():=block([x,y],0+x+y));
"f():=block([x,y],0+x+y)";

/* inspired by

     (let ((name '+))
       (let ((+ *))
         (evaluate (list name 2 3))))

   in: https://en.wikipedia.org/wiki/Scheme_(programming_language)#Lambda_calculus
 */

(kill (plus, times, name),
 plus: lambda ([a, b], a + b),
 times: lambda ([a, b], a * b),
 block ([name: 'plus], block ([plus: 'times], ?meval (funmake (name, [2, 3])))));
5;

/* substitution into lambda should fail
 * e.g. block([a], lambda([v], subst('v=v, lambda([v],a*v))));
 * doesn't change inner lambda
 */

(kill(foo),
 block([a], lambda([v], subst('v=v, lambda([v],a*v)))),
 foo: %%(123),
 string (%%));
"lambda([v],a*v)";

(a: 1111,
 foo(234),
 string(%%));
"234*a";

(foo: subst('v = 456, '(lambda([v], v + 1)(v))),
 string (%%));
"lambda([v],v+1)(456)";

ev(foo);
457;

/* mailing list 2020-05-18: "Anonymous functions and parameter names" */

/* works ok already, ensure it continues to work */
integrate( lambda([x],x^2)(x) * lambda([x],1/sqrt(x))(x) ,x,0,1);
2/5;

/* works ok already, ensure it continues to work */
(kill (ff, gg),
 ff(z):=z^2,
 gg(z):=1/sqrt(z),
 integrate( lambda([x],ff(x))(x) * lambda([x],gg(x))(x) ,x,0,1));
2/5;

/* definitions as stated in email; this is incorrect for computing standard deviation */
(kill (area, incl, one, ex, sd),
 area(x):=x^3/3,
 incl(x):=2*x,
 one(x):=1,
 ex(f,p,a,b):=integrate(f(x)*p(x),x,a,b),
 sd(f,p,a,b):=sqrt( ex(lambda([z],f(z)), p, a, b) ),
 sd(area,one,0,1));
1/(2*sqrt(3));

/* correct calculation of sd */
(var (p, a, b) := ex (lambda ([x], x^2), p, a, b) - (ex (lambda ([x], x), p, a, b))^2,
 sd (p, a, b) := sqrt (var (p, a, b)),
 sd (one, 0, 1));
sqrt(3)/6;

/* mailing list 2020-06-04: "Re: How to use genmatrix in this case?" */

(load (cartan),
 /* roundabout way of ensuring "|" is defined with lexical symbols;
  * see share/calculus/cartan.lisp for current implementation
  */
 lambda ([v, f],
         block([i,j,ext101,ext102,ext103,ext104],
               ext103:expand(f),
               ext102:v[1]*coeff(ext103,cartan_basis[1]),
               for i from 2 thru cartan_dim do
                 (ext101:coeff(ext103,cartan_basis[i]),
                  if ext101 # 0 then ext101:subst(extsub[i],ext101),
                  ext102:ext101*v[i]+ext102),return(expand(ext102)))),
 ?mputprop (verbify("|"), %%, '?mexpr),
 r:[x,y,z],
 init_cartan(r),
 0);
0;

(ω[1]:2*dx-2*dy-dz,
 ω[2]:dx+4*dy,
 v[1]:[1,2,-5],
 v[2]:[0,3,-2],
 M:matrix([v[1]|ω[1],v[1]|ω[2]],[v[2]|ω[1],v[2]|ω[2]]));
matrix([3, 9], [-4, 12]);

genmatrix(lambda([i,j],v[i]|ω[j]),2,2);
matrix([3, 9], [-4, 12]);

/* simpler version -- global array / lexical variable name collision */

(kill (fooarray, foofun, z),
 fooarray[1]: [11, 22, 33],
 foofun (fooarray) := block ([z: fooarray], [fooarray[2], z[2]]),
 foofun ([111, 222, 333]));
[222, 222];

/* mailing list 2020-06-13: "is this a scope problem ?" */

kill (g2, g3, g3a, a, b, c, k);
done;

(g2(a,b) := a * b, 0);
0;

g2(b,c);
b*c;

(g3(a,b) := a[k] * b[k], 0);
0;

g3(b,c);
b[k]*c[k];

(g3a(a,b):=a[k]*b[k], 0);
0;

g3a(b,a);
a[k]*b[k];

/* https://sourceforge.net/p/maxima/bugs/3684/
 * originally: https://stackoverflow.com/questions/65064961/maxima-calling-assume-in-a-function
 */

(kill (foo),
 myctxt: newcontext (),
 foo(a, b) := apply('assume, [a < b]),
 0)$
0;

facts();
[];

foo(0, a);
[a > 0];

foo(b, a);
[a > b];

foo(d, c);
[c > d];

assume(0 < a);
[redundant];

facts ();
[a > 0, a > b, c > d];

killcontext (myctxt);
done;

/* SF bug #3664: "variable name collision in mat_trace" */

(n:3,
kill(cm,m,mg),  
m[1]:ident(2)/*,declare(mg,symmetric)*/,
mg:ident(3),
for i thru 3 do cm[i]:zeromatrix(3,3),
m[1][2,2]:-1,
for i:2 thru 3 do 
m[i]:zeromatrix(2,2),
m[2][1,2]:1,
m[3][2,1]:1,
for i thru 3 do for j:i+1 thru 3 do( t:m[i].m[j]-m[j].m[i],disp([i,j,t])),
cm[1][2,2]:2,
cm[2][1,2]:-2,
cm[1][3,3]:-2,
cm[3][1,3]:2,
cm[2][3,1]:1,
cm[3][2,1]:-1,
for i thru 3 do(mg[i,i]:mat_trace(cm[i].cm[i]),
for j:i+1 thru 3 do mg[i,j]:mat_trace(cm[i].cm[j]) ));
done;

mg;
matrix([8,0,0],[0,0,4],[0,0,0]);

arrayinfo(cm);
[hashed,1,[1],[2],[3]];

listarray(cm);
[matrix([0,0,0],[0,2,0],[0,0,-2]),
 matrix([0,-2,0],[0,0,0],[1,0,0]),
 matrix([0,0,2],[-1,0,0],[0,0,0])];

arrayinfo(m);
[hashed,1,[1],[2],[3]];

listarray(m);
[matrix([1,0],[0,-1]),
 matrix([0,1],[0,0]),
 matrix([0,0], [1,0])];

mat_trace(ident(3));
3;

/* SF bug #3654: "uniteigenvectors fails if uv[1] is used in the user main program." */

(if ?mget ('uniteigenvectors, '?mexpr) = false then load(eigen), 0);
0;

(kill(m, mm, r, uv, foo, θ),
 assume (m > 0, r > 0),
 mm:matrix(
          [-(r-2*m)/r,    sqrt(2*m/r),    0,  0],
          [sqrt(2*m/r),   1,  0,  0],
          [0, 0,  r^2,    0],
          [0, 0,  0,  r^2*sin(θ)^2]
      ),
 foo: uniteigenvectors(mm),
 0);
0;

/* go through some gyrations here to verify result of uniteigenvectors */

(kill(S),
 [e1, e2, e3, e4]: [foo[2][1][1], foo[2][2][1], foo[2][3][1], foo[2][4][1]],
 S: transpose (matrix (e1, e2, e3, e4)),
 ratsimp (S . transpose (S)));
matrix ([1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]);

(kill(Lambda),
 Lambda: ident(4),
 for i thru 4 do Lambda[i, i]: foo[1][1][i],
 ratsimp (S . Lambda . transpose (S) - mm));
matrix ([0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]);

/* now test in presence of uv array */

(kill(uv), uv[1]:0);
0;

member ('uv, arrays);
true;

(bar: uniteigenvectors(mm),
 is (bar = foo));
true;

kill(uv);
done;

/* SF bug #3605: "Variable confusion in function handling Taylor series" */

/* function definition copied verbatim from bug report --
 * expect same result as without lexical symbols
 */
(test(f) := block([i:taylorinfo(f)[1]], sum(coeff(f, i[1], x) * i[1]^x, x, 0, i[3])), 0);
0;

ratdisrep (test(taylor(cos(y), y, 0, 4)));
(y^4-12*y^2+24)/24;

ratdisrep (test(taylor(cos(x), x, 0, 4)));
29/3;

/* now try it again, making x a lexical symbol in function test */

(test(f) := block([x, i:taylorinfo(f)[1]], sum(coeff(f, i[1], x) * i[1]^x, x, 0, i[3])), 0);
0;

ratdisrep (test(taylor(cos(y), y, 0, 4)));
(y^4-12*y^2+24)/24;

ratdisrep (test(taylor(cos(x), x, 0, 4)));
(x^4-12*x^2+24)/24;

/* declare summation index in block to distinguish from global
 *
 * x is a lexical variable in the block; this is necessary
 * because sum evaluates the summand before
 * subsituting a gensym for the summation index,
 * so x being the summation index isn't enough to help sum
 * distinguish x as the summation index from x as the Taylor variable.
 * That might or might not indicate a weakness in sum, but anyway,
 * this arrangement enables test to get the expected result.
 *
 * The only benefit of lexical symbols for this problem is that
 * the summation index can have the same name as the global variable;
 * it need not have a % wart or other workaround.
 * #summationindexscope
 */
(test1(f) := block([i:taylorinfo(f)[1], x], sum(coeff(f, i[1], x) * i[1]^x, x, 0, i[3])), 0);
0;

ratdisrep (test1(taylor(cos(y), y, 0, 4)));
(y^4-12*y^2+24)/24;

ratdisrep (test1(taylor(cos(x), x, 0, 4)));
(x^4-12*x^2+24)/24;

/* SF bug #3462: "simplify_sum() variable name clash" */

(load("simplify_sum"), kill(a), 0);
0;

simplify_sum(sum((2*i+1)^-2, i, 0, inf));
%pi^2/8;

(a[i] := i, simplify_sum(sum((2*i+1)^-2, i, 0, inf)));
%pi^2/8;

(kill(a), simplify_sum(sum((2*i+1)^-2, i, 0, inf)));
%pi^2/8;

/* SF bug #3684: "Calling assume within function leads to mixed-up facts" */

(kill(all), foo(a, b) := apply('assume, [a < b]), 0);
0;

facts();
[];

foo(0, a);
[a > 0];

foo(b, a);
[a > b];

foo(d, c);
[c > d];

assume(0 < a);
[redundant];

/* SF bug #1991: "Another function local variable affected. Scope broken?" */

/*
g(x,y):=block([z],[x,z[2]] );
g(1,2); /* => [1, z ] */

f(x,y):=block([z]
,z[1]:x
,z[2]:y
,[x,z[2]] );

f(1,2); /* => [1, 2 ] */

g(1,2); /* =>[1, 2 ] not [1, z_2 ] I except former result */
 */

kill (f, g, z);
done;

(g(x, y) := block([z], [x, z[2]]), foo: g(1, 2), string(foo));
"[1,z[2]]";

is (foo = [1, z[2]]);
false;

(f(x, y) := block([z], z[1]:x, z[2]:y, [x, z[2]]), f(1, 2));
[1, 2];

(bar: g(1, 2), string(bar));
"[1,z[2]]";

is (bar = [1, z[2]]);
false;

/* SF bug #224: "3 solver bugs", third bug */

/*
don't use i or k as one of your variables:

[...]
(C8) trace(solve)$ 

(C9) solver([u-t*(u^(k+1)+1)=0,1-(k+1)*t*u^k=0],[u,t]); 

1 Enter SOLVE [(-k-1)*t*u^k+1,t] 
1 Exit  SOLVE [t = 1/((k+1)*u^k)] 
Warning: GET(OP(EXPR),'Valuation) was declared mode FIXNUM, has 
value: FALSE 
1 Enter SOLVE [(2*u^3-1)/(3*u^2),u] 

* obviously, this is wrong here ** who set k=2 ??? This might
have to do with dynamic scope - in valuationsolver k is used, and if I
leave away the parameter k, i get the following message:

Warning: GET(OP(EXPR),'Valuation) was declared mode FIXNUM, has 
value: 
FALSE 
*********************************************** 


1 Exit  SOLVE [u = (SQRT(3)*%I-1)/(2*2^(1/3)),u = 
-(SQRT(3)*%I+1)/(2*2^(1/3)),u = 1/2^(1/3)] 
(D9) [[u = (SQRT(3)*%I-1)/(2*2^(1/3)), 
t = 2^(4*k/3)/((SQRT(3)*%I-1)^k*k+(SQRT(3)*%I-1)^k)], 
[u = -(SQRT(3)*%I+1)/(2*2^(1/3)), 
t = 2^(4*k/3)/((-SQRT(3)*%I-1)^k*k+(-SQRT(3)*%I-1)^k)], 
[u = 1/2^(1/3),t = 2^(k/3)/(k+1)]] 

similar trouble for i

(C10) solver([u-t*(u^(i+1)+1)=0,1-(i+1)*t*u^i=0],[u,t],[i]); 

1 Enter SOLVE [(-i-1)*t*u^i+1,t] 
1 Exit  SOLVE [t = 1/((i+1)*u^i)] 
1 Enter SOLVE [(i*u^(i+1)-1)/((i+1)*u^i),u] 
Is  i  an integer? 

y; 
1 Exit  SOLVE [u = 1/i^(1/(i+1))] 
(D10) [[u = 1,t = 1/2]] 

(with l in place of i or k the result is correct:

solver([u-t*(u^(l+1)+1)=0,1-(l+1)*t*u^l=0],[u,t],[l]); 

(D15) [[u = 1/l^(1/(l+1)),t = l^(l/(l+1))/(l+1)]] 
 */

(load (Solver),
 kill (i, k, l, blurf, u, t),
 declare ([i, k, l, blurf], integer),
 eqs: [u-t*(u^(k+1)+1)=0,1-(k+1)*t*u^k=0],
 foo: Solver (subst (k = blurf, eqs), [u, t], [blurf]));
[[u = 1/blurf^(1/(blurf+1)),t = blurf^(blurf/(blurf+1))/(blurf+1)]];

Solver (eqs, [u, t], [k]);
''(subst (blurf = k, foo));

Solver (subst (k = i, eqs), [u, t], [i]);
''(subst (blurf = i, foo));

Solver (subst (k = l, eqs), [u, t], [l]);
''(subst (blurf = l, foo));

/* SF bug #2715: "Function argument name collision with global symbol yields surprising result" */

(kill (a, b, foo, foobar),
 foo(a,b):=a-b,
 foobar(a,b):=a[1]-b[1],
 0);
0;

foo(b, a);
b - a;

foobar(x, [1]);
x[1] - 1;

foobar(b, [1]);
b[1] - 1;

foobar(b, a);
b[1] - a[1];

/* SF bug #3993: "solve_rec: map: improper argument: all"
 * Requires patched version of simplify_product
 * to change name of argument from prod to myprod
 */

(load (solve_rec),
 solve_rec((2*j+2)*y[j]-(3*j+5)*y[j+1]+(j+5/2)*y[j+2], y[j]));
y[j] = (sqrt(%pi)*%k[1]*j!)/gamma((2*j+3)/2)$

/* maxima-discuss 2022-08-01: "In what way do names of function parameters matter?" */

(kill (f, a, b, c, x, y, z),
 f(a,b) := [a[1]*b[1] - a[2]*b[2], a[1]*b[2] + a[2]*b[1]],
 0);
0;

expand(f(x,f(y,z)) - f(f(x,y),z));
[0, 0];

expand(f(a,f(b,c)) - f(f(a,b),c));
[0, 0];

/* maxima-discuss 2022-08-08: "In what way do names of function parameters matter?" */

(kill (f, a, b, c),
 f(a, b) := [a[1], b[2]],
 0);
0;

f(c, b);
[c[1], b[2]];

f(b, c);
[b[1], c[2]];

f(a, b);
[a[1], b[2]];

f(b, a);
[b[1], a[2]];

/* SF bug #2519: "global and local name mismatch for tables in block" */

(kill(a), buggy(a):=block([], a[1,1]:0), 0);
0;

(a[1]:1, b:matrix([1, 2]), 0);
0;

buggy(b);
0;

