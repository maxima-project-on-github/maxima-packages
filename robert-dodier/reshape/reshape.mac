load ("reshape-array.lisp");

reshape (x, dims, [major_flag]) :=

    block ([major_flag1, dims_integer, i_any, dims1, dim_any, l],

           if major_flag = []
               then major_flag1: 'by_rows
           elseif major_flag = '[by_rows] or major_flag = '[by_columns]
               then major_flag1: major_flag[1]
               else error ("reshape: optional argument must be 'by_rows or 'by_columns; found:", major_flag),

           dims_integer: sublist (dims, integerp),

           if not every (integerp, dims) and (i_any: exactly_one (dims, 'any)) = false
               then error ("reshape: dimensions must contain exactly one 'any, if not all integers; found:", dims),

           if mod (n_elements (x), apply ("*", dims_integer)) = 0
               then if every (integerp, dims)
                        then dims1: dims
                    else
                       (dims1: copy (dims),
                        dim_any: n_elements (x) / apply ("*", dims_integer),
                        dims1[i_any]: dim_any)
               else error (printf (false, "reshape: dimensions do not evenly divide the number of elements; found #elements = ~M, dims = ~M~%", n_elements (x), dims)),

           if listp (x)
               then l: flatten (x)
           elseif matrixp (x)
               then l: flatten (args (x))
           elseif ?arrayp (x) or declared_arrayp (x)
               then l: x
               else merror ("reshape: first argument must be a list or array; found: ~M", x),

           if matrixp (x) and length (dims) # 2
               then error (printf (false, "reshape: when first argument is a matrix, number of dimensions must be exactly two; found; ~M~%", dims)),

           if length (dims1) = 1
               then
                    if listp (l)
                        /* We have already ensured that dims[1] = 'any or dims[1] = length(l).
                         * Not guaranteed, from what I can tell, that the result of flatten(x)
                         * is distinct from x; copy l to play it safe.
                         */
                        then copy (l)
                        else flatten_array (l)

               else
                   (if major_flag1 = 'by_rows
                        then reshape_by_rows (l, 0, [], dims1)
                        else reshape_by_columns (l, [], [], dims1),
                    if matrixp (x)
                        then apply ('matrix, %%)
                        else %%));

exactly_one (l, a) :=
    (sublist_indices (l, lambda ([l1], l1 = a)),
     if length (%%) = 1 then %%[1]);

n_elements (x) :=
    if listp (x) then n_elements_list (x)
    elseif matrixp (x) then n_elements_matrix (x)
    elseif ?arrayp (x) then ?array\-total\-size (x)
    elseif declared_arrayp (x) then ?array\-total\-size (get_array_from_declared_array (x))
        else error ("n_elements: argument must be a list or array.");

n_elements_list (x) := length (flatten (x));

n_elements_matrix (x) :=
    block ([a: args (x)],
           if length (a) = 0
               then 0
               else (length (a) * length (a[1])));

reshape_by_rows (l, l_offset, dims0, dims1) :=
    if listp (l)
        then reshape_list_by_rows (l, l_offset, dims0, dims1)
        else reshape_array_by_rows (l, dims1);

reshape_list_by_rows (l, l_offset, dims0, dims1) :=
    if length (dims1) = 1
        then makelist (l[l_offset + i], i, 1, first (dims1))
        else block ([stride: apply ("*", rest (dims1))],
                    makelist (reshape_by_rows (l, l_offset + (i - 1)*stride, endcons (first (dims1), dims0), rest (dims1)), i, 1, first (dims1)));

reshape_by_columns (l, ii, dims0, dims1) :=
    if listp (l)
        then reshape_list_by_columns (l, ii, dims0, dims1)
        else reshape_array_by_columns (l, dims1);

reshape_list_by_columns (l, ii, dims0, dims1) :=
    if length (ii) = length (dims0) + length (dims1) - 1
        then block ([i, n0: apply ("*", dims0)],
                    i: last (ii),
                    for j: (length (dims0) - 1) step -1 thru 1 do i: i*dims0[j] + ii[j],
                    makelist (l [1 + i + c*n0], c, 0, first (dims1) - 1))
        else makelist (reshape_by_columns (l, endcons (i, ii), endcons (first (dims1), dims0), rest (dims1)), i, 0, first (dims1) - 1);
