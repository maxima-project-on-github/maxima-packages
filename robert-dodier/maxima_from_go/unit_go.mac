 
GenDecl("Specs" = [ImportSpec("Name" = null,"Path" = "math")],"Tok" = "import")$
 
 
FromSexa(neg,d,m,s):=FromSexaSec(neg,d,m,s)/3600$
 
 
FromSexaSec(neg,d,m,s):=returning(block(s:s+float64(60*(m+60*d)),if equal(neg,"-") then block(throw('return(-s))),throw('return(s))))$
 
 
PMod(x,y):=returning(block([r],r:math@Mod(x,y),if r < 0 then block(r:y+r),throw('return(r))))$
 
 
GenDecl("Specs" = [TypeSpec("Name" = Angle,"Type" = float64,"TypeParams" = null)],"Tok" = "type")$
 
 
AngleFromDeg(d):=Angle((d*math@Pi)/180)$
 
 
AngleFromMin(m):=Angle((m*math@Pi)/10800)$
 
 
AngleFromSec(s):=Angle((math@Pi*s)/648000)$
 
 
NewAngle(neg,d,m,s):=AngleFromSec(FromSexaSec(neg,d,m,s))$
 
 
Rad[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],float64(a)))))$
 
 
Deg[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],(180*float64(a))/math@Pi))))$
 
 
Min[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],(10800*float64(a))/math@Pi))))$
 
 
Sec[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],(648000*float64(a))/math@Pi))))$
 
 
HourAngle[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],HourAngle(a)))))$
 
 
RA[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],RAFromRad(Rad[go_type_of(a)](a)())))))$
 
 
Time[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],TimeFromRad(Rad[go_type_of(a)](a)())))))$
 
 
Mul[Angle]:lambda([a],buildq([recv_value:a],lambda([f],block([a:recv_value],a*Angle(f)))))$
 
 
Div[Angle]:lambda([a],buildq([recv_value:a],lambda([d],block([a:recv_value],a/Angle(d)))))$
 
 
Mod1[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],Angle(PMod(Rad[go_type_of(a)](a)(),2*math@Pi))))))$
 
 
Sin[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],math@Sin(Rad[go_type_of(a)](a)())))))$
 
 
Cos[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],math@Cos(Rad[go_type_of(a)](a)())))))$
 
 
Tan[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],math@Tan(Rad[go_type_of(a)](a)())))))$
 
 
Sincos[Angle]:lambda([a],buildq([recv_value:a],lambda([],block([a:recv_value],math@Sincos(Rad[go_type_of(a)](a)())))))$
 
 
GenDecl("Specs" = [TypeSpec("Name" = HourAngle,"Type" = float64,"TypeParams" = null)],"Tok" = "type")$
 
 
HourAngleFromHour(h):=HourAngle((h*math@Pi)/12)$
 
 
HourAngleFromMin(m):=HourAngle((m*math@Pi)/720)$
 
 
HourAngleFromSec(s):=HourAngle((math@Pi*s)/43200)$
 
 
NewHourAngle(neg,h,m,s):=HourAngle((math@Pi*FromSexa(neg,h,m,s))/12)$
 
 
Rad[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],float64(h)))))$
 
 
Hour[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],(12*float64(h))/math@Pi))))$
 
 
Min[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],(720*float64(h))/math@Pi))))$
 
 
Sec[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],(43200*float64(h))/math@Pi))))$
 
 
Angle[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],Angle(h)))))$
 
 
RA[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],RAFromRad(Rad[go_type_of(h)](h)())))))$
 
 
Time[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],Time(Sec[go_type_of(h)](h)())))))$
 
 
Mul[HourAngle]:lambda([h],buildq([recv_value:h],lambda([f],block([h:recv_value],HourAngle(f)*h))))$
 
 
Div[HourAngle]:lambda([h],buildq([recv_value:h],lambda([f],block([h:recv_value],h/HourAngle(f)))))$
 
 
Sin[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],math@Sin(Rad[go_type_of(h)](h)())))))$
 
 
Cos[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],math@Cos(Rad[go_type_of(h)](h)())))))$
 
 
Tan[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],math@Tan(Rad[go_type_of(h)](h)())))))$
 
 
Sincos[HourAngle]:lambda([h],buildq([recv_value:h],lambda([],block([h:recv_value],math@Sincos(Rad[go_type_of(h)](h)())))))$
 
 
GenDecl("Specs" = [TypeSpec("Name" = RA,"Type" = float64,"TypeParams" = null)],"Tok" = "type")$
 
 
NewRA(h,m,s):=RAFromRad((FromSexa(0,h,m,s)*math@Pi)/12)$
 
 
RAFromDeg(d):=RAFromRad((d*math@Pi)/180)$
 
 
RAFromHour(h):=RAFromRad((h*math@Pi)/12)$
 
 
RAFromMin(m):=RAFromRad((m*math@Pi)/720)$
 
 
RAFromRad(rad):=RA(PMod(rad,2*math@Pi))$
 
 
RAFromSec(s):=RAFromRad((math@Pi*s)/43200)$
 
 
Rad[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],float64(ra)))))$
 
 
Deg[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],(180*float64(ra))/math@Pi))))$
 
 
Hour[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],(12*float64(ra))/math@Pi))))$
 
 
Min[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],(720*float64(ra))/math@Pi))))$
 
 
Sec[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],(43200*float64(ra))/math@Pi))))$
 
 
Angle[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],Angle(ra)))))$
 
 
HourAngle[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],HourAngle(ra)))))$
 
 
Time[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],TimeFromRad(Rad[go_type_of(ra)](ra)())))))$
 
 
Add[RA]:lambda([ra],
               buildq([recv_value:ra],lambda([h],block([ra:recv_value],RAFromRad(Rad[go_type_of(ra)](ra)()+Rad[go_type_of(h)](h)())))))$
 
 
Sin[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],math@Sin(Rad[go_type_of(ra)](ra)())))))$
 
 
Cos[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],math@Cos(Rad[go_type_of(ra)](ra)())))))$
 
 
Tan[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],math@Tan(Rad[go_type_of(ra)](ra)())))))$
 
 
Sincos[RA]:lambda([ra],buildq([recv_value:ra],lambda([],block([ra:recv_value],math@Sincos(Rad[go_type_of(ra)](ra)())))))$
 
 
GenDecl("Specs" = [TypeSpec("Name" = Time,"Type" = float64,"TypeParams" = null)],"Tok" = "type")$
 
 
NewTime(neg,h,m,s):=returning(
        block(s:s+float64(60*(m+60*h)),if equal(neg,"-") then block(throw('return(Time(-s)))),throw('return(Time(s)))))$
 
 
TimeFromDay(d):=Time(86400*d)$
 
 
TimeFromHour(h):=Time(3600*h)$
 
 
TimeFromMin(m):=Time(60*m)$
 
 
TimeFromRad(rad):=Time((43200*rad)/math@Pi)$
 
 
Day[Time]:lambda([t],buildq([recv_value:t],lambda([],block([t:recv_value],float64(t)/86400))))$
 
 
Hour[Time]:lambda([t],buildq([recv_value:t],lambda([],block([t:recv_value],float64(t)/3600))))$
 
 
Min[Time]:lambda([t],buildq([recv_value:t],lambda([],block([t:recv_value],float64(t)/60))))$
 
 
Rad[Time]:lambda([t],buildq([recv_value:t],lambda([],block([t:recv_value],(math@Pi*float64(t))/43200))))$
 
 
Sec[Time]:lambda([t],buildq([recv_value:t],lambda([],block([t:recv_value],float64(t)))))$
 
 
Angle[Time]:lambda([t],buildq([recv_value:t],lambda([],block([t:recv_value],Angle(Rad[go_type_of(t)](t)())))))$
 
 
HourAngle[Time]:lambda([t],buildq([recv_value:t],lambda([],block([t:recv_value],HourAngle(Rad[go_type_of(t)](t)())))))$
 
 
RA[Time]:lambda([t],buildq([recv_value:t],lambda([],block([t:recv_value],RAFromRad(Rad[go_type_of(t)](t)())))))$
 
 
Mul[Time]:lambda([t],buildq([recv_value:t],lambda([f],block([t:recv_value],Time(Sec[go_type_of(t)](t)()*f)))))$
 
 
Div[Time]:lambda([t],buildq([recv_value:t],lambda([d],block([t:recv_value],Time(Sec[go_type_of(t)](t)()/d)))))$
 
 
Mod1[Time]:lambda([t],buildq([recv_value:t],lambda([],block([t:recv_value],Time(PMod(float64(t),86400))))))$
 
