load ("math_go.mac");
load ("base_go.mac");

len: length;

/* I guess everything in the builtin package could go here ... !! */

defstruct (builtin_struct (append));

builtin: new (builtin_struct);

/* Go append(l, a, b, c, ...) appends [a, b, c, ...] to l. */
builtin@append: lambda ([l, [ll]], apply (append, [l, ll]));

/* assuming here that throw(continue) and throw(return(...)) are the only possibilities */

continuing ([e]) ::=
    buildq ([e], (catch (splice (e)), if atom (%%) or op (%%) # nounify ('return) then %% else throw (%%)));

returning ([e]) ::=
    buildq ([e], (catch (splice (e)), if not atom (%%) and op (%%) = nounify ('return) then first (%%) else throw (%%)));

/* need to extract these from package definitions in Go AST;
 * this explicit list is a stopgap measure.
 */

go_packages_list: '[unit, solar, nutation];

/* need to extract these from type definitions in Go AST;
 * this explicit list is a stopgap measure.
 */

go_classes_list: '[Angle, HourAngle, RA, Time];

go_type_of (e) :=
    if atom (e)
        then (if floatnump (e) then 'float64
              elseif integerp (e) then 'int
              elseif stringp (e) then 'string
              else 'go_type_of (e))
        else (if member (op (e), go_classes_list) then op (e)
              elseif member (op (e), map (op, structures)) then op (e)
              else 'go_type_of (e));

matchdeclare (aa, all);

/* In the interest of making the results symbolic instead of numerical,
 * simplify float64(Foo(aa)) to just aa instead of float(aa).
 */

tellsimpafter (float64 (Angle (aa)), aa);
tellsimpafter (float64 (HourAngle (aa)), aa);
tellsimpafter (float64 (RA (aa)), aa);
tellsimpafter (float64 (Time (aa)), aa);

/* I wonder if this needs to be expanded to other types of arguments ?? */
matchdeclare (nn, numberp);
tellsimpafter (float64 (nn), nn);

tellsimpafter (HourAngle (Angle (aa)), HourAngle (aa));
tellsimpafter (Angle (HourAngle (aa)), Angle (aa));

matchdeclare (xx, lambda ([e], not atom (e) and op (e) = 'Angle));
matchdeclare (zz, lambda ([e], e = 0));

tellsimpafter (xx + zz, Angle (map (lambda ([e], first (e)), xx)));
tellsimpafter (xx * nn, if op (xx) = "*" then Angle (nn * map (lambda ([e], first (e)), xx)) else Angle (nn * first (xx)));
tellsimpafter (xx^nn, Angle (first (xx)^nn));

/* ideally this stuff about the unit package would be automatically generated ... !! */

load ("unit_go.mac");

defstruct (unit_struct (Angle, HourAngle, RA, Time, FromSexa, FromSexaSec, PMod, AngleFromDeg, AngleFromMin, AngleFromSec, NewAngle, HourAngleFromHour, HourAngleFromMin, HourAngleFromSec, NewHourAngle, NewRA, RAFromDeg, RAFromHour, RAFromMin, RAFromRad, RAFromSec, NewTime, TimeFromDay, TimeFromHour, TimeFromMin, TimeFromRad));
unit: new (unit_struct);

unit@Angle: lambda ([x], Angle (x));
unit@HourAngle: lambda ([x], HourAngle (x));
unit@RA: lambda ([x], RA (x));
unit@Time: lambda ([x], Time (x));

unit@FromSexa: ?mget (FromSexa, ?mexpr);
unit@FromSexaSec: ?mget (FromSexaSec, ?mexpr);
unit@PMod: ?mget (PMod, ?mexpr);
unit@AngleFromDeg: ?mget (AngleFromDeg, ?mexpr);
unit@AngleFromMin: ?mget (AngleFromMin, ?mexpr);
unit@AngleFromSec: ?mget (AngleFromSec, ?mexpr);
unit@NewAngle: ?mget (NewAngle, ?mexpr);
unit@HourAngleFromHour: ?mget (HourAngleFromHour, ?mexpr);
unit@HourAngleFromMin: ?mget (HourAngleFromMin, ?mexpr);
unit@HourAngleFromSec: ?mget (HourAngleFromSec, ?mexpr);
unit@NewHourAngle: ?mget (NewHourAngle, ?mexpr);
unit@NewRA: ?mget (NewRA, ?mexpr);
unit@RAFromDeg: ?mget (RAFromDeg, ?mexpr);
unit@RAFromHour: ?mget (RAFromHour, ?mexpr);
unit@RAFromMin: ?mget (RAFromMin, ?mexpr);
unit@RAFromRad: ?mget (RAFromRad, ?mexpr);
unit@RAFromSec: ?mget (RAFromSec, ?mexpr);
unit@NewTime: ?mget (NewTime, ?mexpr);
unit@TimeFromDay: ?mget (TimeFromDay, ?mexpr);
unit@TimeFromHour: ?mget (TimeFromHour, ?mexpr);
unit@TimeFromMin: ?mget (TimeFromMin, ?mexpr);
unit@TimeFromRad: ?mget (TimeFromRad, ?mexpr);

/* same with this stuff about the nutation package !! */

load ("nutation_go.mac");

defstruct (nutation_struct (Nutation, ApproxNutation, MeanObliquity, MeanObliquityLaskar, NutationInRA));
nutation: new (nutation_struct);

nutation@Nutation: ?mget (Nutation, ?mexpr);
nutation@ApproxNutation: ?mget (ApproxNutation, ?mexpr);
nutation@MeanObliquity: ?mget (MeanObliquity, ?mexpr);
nutation@MeanObliquityLaskar: ?mget (MeanObliquityLaskar, ?mexpr);
nutation@NutationInRA: ?mget (NutationInRA, ?mexpr);

