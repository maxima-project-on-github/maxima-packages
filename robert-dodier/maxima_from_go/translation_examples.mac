load ("maxima_from_go.mac");

/* ideally maintain one list per module or package, not sure which */
methods_list: [];

blob1:read_json("FromSexa.json");
results1: apply_all_rules (blob1);
grind (last (results1));
''(last (results1));

blob2: read_json ("FromSexaSec.json");
results2: apply_all_rules (blob2);
grind (last (results2));
''(last (results2));

FromSexa ("+", hh, mm, ss);
FromSexa ("-", hh, mm, ss);

kill (FromSexa, FromSexaSec);

unit_blobs: read_json ("unit1.json");
unit_decls: unit_blobs // "Decls" $
unit_results: map (apply_all_rules, unit_decls) $

print ("output results from apply_all_rules on unit_decls to unit_go.mac.") $

with_stdout ("unit_go.mac",
    for results in unit_results
        do (print (""),
            grind (last (results)),
            print ("")));

print ("found", length (methods_list), "methods in unit1.json:", reverse (methods_list));

solar_blobs: read_json ("solar1.json");
solar_decls: solar_blobs // "Decls" $
solar_results: map (apply_all_rules, solar_decls);

print ("output results from apply_all_rules on solar_decls to solar_go.mac.") $

with_stdout ("solar_go.mac",
    for results in solar_results
        do (print (""),
            grind (last (results)),
            print ("")));

nutation_blobs: read_json ("nutation1.json");
nutation_decls: nutation_blobs // "Decls" $
nutation_results: map (apply_all_rules, nutation_decls);

print ("output results from apply_all_rules on nutation_decls to nutation_go.mac.") $

with_stdout ("nutation_go.mac",
    for results in nutation_results
        do (print (""),
            grind (last (results)),
            print ("")));


