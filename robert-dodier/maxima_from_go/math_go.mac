/* math_go.mac -- reimplementation of functions from the Go package 'math'
 *
 * Don't try to cover everything here; this is just enough for unit.go and solar.go.
 * Maybe cover the rest later.
 */

defstruct (math_struct (Pi, Mod, Sin, Cos, Tan, Sincos, Asin, Acos, Atan2, Abs));

math: new (math_struct);

/* not sure if we want math@Pi to be a symbol or a number.
 * when it's a symbol, results are much more verbose expressions and calculations are very slow.
 * for now switch it back to a number.
 *
/* math.Pi is a numerical value in Go, but for symbolic manipulation assume it's a symbol. */
math@Pi: %pi;
 */
math@Pi: float (%pi);

/* https://pkg.go.dev/math#Mod says:
 * "Mod returns the floating-point remainder of x/y. The magnitude of the result is less than y and its sign agrees with that of x."
 */

math@Mod: lambda ([x, y], if x < 0 then mod (x, y) - y else mod (x, y));

math@Sin: sin;

math@Cos: cos;

math@Tan: tan;

math@Sincos: lambda ([x], [sin (x), cos (x)]);

math@Asin: asin;

math@Acos: acos;

math@Atan2: atan2;

math@Abs: abs;

/* may need a bunch of other Foo[float64] functions here ... !! */

Sincos[float64]: lambda ([x], buildq ([y: math@Sincos (x)], lambda ([], y)));
