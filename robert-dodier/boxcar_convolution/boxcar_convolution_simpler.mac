/* simpler approach for convolution of boxcar1*function1 with boxcar2*function2 */

declare (nounify (integrate), linear);

matchdeclare ([aa, bb, cc, dd], freeof (vv));
matchdeclare ([uu, vv], mapatom);
matchdeclare ([ee1, ee2], freeof (B));

/* this next rule might depends on "*" expressions being ordered a certain way,
 * such that B-stuff gets divided out before testing ee ...
 * as it stands it seems to work as expected, in limited testing,
 * but it is possible that it might stop working if the variables were named differently.
 */

tellsimpafter (conv (B[aa, bb](uu)*ee1, B[cc, dd](uu)*ee2)(vv), rewrite_conv (aa, bb, cc, dd, ee1, ee2, uu, vv));

rewrite_conv (a, b, c, d, e1, e2, u, v) :=

    block ([new_integrand, left_boxcar, right_boxcar],
           left_boxcar: B[a, b](v - c)*B[a, v - c](u),
           right_boxcar: B[a, b](v - d)*B[v - d, b](u),
           new_integrand: (left_boxcar + right_boxcar) * e1 * subst (u = v - u, e2),
           'integrate (new_integrand, u, minf, inf));

simp: false; /* prevent ee1 from getting pulled out of 'integrate */
tellsimpafter ('integrate (B[aa, bb](uu)*ee1, uu, minf, inf), 'integrate (ee1, uu, aa, bb));
simp: true;

declare (conv, additive);

matchdeclare (cc, constantp);
matchdeclare (aa, all);
matchdeclare (xx, all);
tellsimpafter ((aa + cc)(xx), cc + (if not atom(aa) and op(aa) = "+" then map (lambda ([e], e(xx)), aa) else aa(xx)));

matchdeclare ([aa, bb], all);
matchdeclare (yy, lambda ([e], e # 0 and constantp(e)));
matchdeclare (xx, mapatom);
tellsimpafter (B[aa, bb](xx + yy), B[aa - yy, bb - yy](xx));

/* now try repeated convolution of B[0, 1](t) */

conv1: B[0, 1](x);
conv (B[0, 1](t), B[0, 1](t))(x);
conv2: expand (%, 0, 0); /* some rules didn't get applied so resimplify */
plot2d ([conv1, conv2], [x, -1, 3]), B[a, b](z) := if z >= a and z < b then 1 else 0;

conv (subst (x = t, %), B[0, 1](t))(x);
expand (%);
%, nouns;
conv3: expand (%);
plot2d ([conv1, conv2, conv3], [x, -1, 4]), B[a, b](z) := if z >= a and z < b then 1 else 0;

conv (subst (x = t, conv3), B[0, 1](t))(x);
expand (%);
%, nouns;
conv4: expand (%);
plot2d ([conv1, conv2, conv3, conv4], [x, -1, 5]), B[a, b](z) := if z >= a and z < b then 1 else 0;
