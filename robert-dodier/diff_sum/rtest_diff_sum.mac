(if not get ('diff_sum, 'present)
   then load ("diff_sum.mac")
   else print ("rtest_diff_sum: diff_sum already present."),
 if not get ('sum_kron_delta, 'present)
   then load ("../sum_kron_delta/sum_kron_delta.mac")
   else print ("rtest_diff_sum: sum_kron_delta already present."),
 0);
0;

'diff ('sum (a[i] * x[i]^2, i, 1, n), x[j]);
2*(if 1 <= j and j <= n and %elementp(j,integers) then a[j]*x[j] else 0);

while_assuming ([j >= 1, j <= n],
  while_declaring ([j, integer],
    'diff ('sum (a[i] * x[i]^2, i, 1, n), x[j])));
2*a[j]*x[j];
    
/* from the mailing list 2016-12-08: "Differentiation of indexed variables under sums" */

(L:(m*'sum(xdot[i](t)^2,i,1,n))/2+e*'sum(A[i]*xdot[i](t),i,1,n)+Phi*e,
 foo : 'diff (L, xdot[j](t)));
'diff((m*'sum(xdot[i](t)^2,i,1,n))/2+e*'sum(A[i]*xdot[i](t),i,1,n)
                                          +Phi*e,xdot[j](t),1);

(declare ([m, e, Phi], constant),
 ev (foo, simp));
'diff((m*'sum(xdot[i](t)^2,i,1,n))/2+e*'sum(A[i]*xdot[i](t),i,1,n)
                                          +Phi*e,xdot[j](t),1);

while_declaring ([nounify(sum), linear],
  bar : ev (foo, simp));
'diff((m*'sum(xdot[i](t)^2,i,1,n))/2+e*'sum(A[i]*xdot[i](t),i,1,n)
                                           +Phi*e,xdot[j](t),1);

ev (bar, nouns);
0;

while_declaring ([nounify(diff), linear],
  (baz : ev (foo, simp),
   string (baz)));
"m*(if 1 <= j and j <= n and %elementp(j,integers) then xdot[j](t) else 0)\
+e*(if 1 <= j and j <= n and %elementp(j,integers) then A[j] else 0)";

(declare (j, integer),
 assume (j >= 1, j <= n),
 ev (baz, simp));
m*xdot[j](t)+e*A[j];

/* diff wrt specific index */

'diff('sum(f(x[i]), i, 1, n), x[1]);
if true then 'diff(f(x[1]),x[1],1) else 0; /* package boolsimp can simplify this to the 'then' clause */

'diff('sum(f(x[i]), i, 1, n), x[2]);
if 2 <= n then 'diff(f(x[2]),x[2],1) else 0;

'diff('sum((x[i])^i, i, 1, n), x[2]);
if 2 <= n then 2*x[2] else 0;

/* adapted from: https://stackoverflow.com/questions/77626748/dfferentiating-a-sum-in-sympy */

kill (q, t, u);
done;

foo: 'diff ('sum (q[t]*log(q[t]), t, 1, N), q[u]);
if (1 <= u) and (u <= N) and %elementp(u, integers) then log(q[u]) + 1 else 0;

foo1: block (assume (u >= 1, u <= N), ev (foo));
if %elementp(u, integers) then log(q[u]) + 1 else 0;

block (declare (u, integer), ev (foo));
log(q[u]) + 1;

(forget (facts (u)), kill (q, u));
done;
