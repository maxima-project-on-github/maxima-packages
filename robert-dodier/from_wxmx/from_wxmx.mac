load ("expressions_from_dom.mac");
load ("parse_token_list.lisp");

wxmx_content_xml: "content.xml"; /* make it a variable in case it ever changes */

expressions_from_wxmx (filename_wxmx) :=
    (parse_xml (open_zip_input_stream (filename_wxmx, wxmx_content_xml)),
     expressions_from_dom (%%));

extract_input_lines (expr) :=
    block ([input_ops, input_ops_lines, input_lines],
           input_ops: extract_ops (expr, editor ("type" = "input")),
           input_ops_lines: extract_ops (input_ops, line ()),
           input_lines: flatten (map (args, input_ops_lines)),
           [input_ops, input_ops_lines, input_lines]);

maxima_from_wxmx (filename_wxmx, filename_mac) :=
    (expressions_from_wxmx (filename_wxmx),
     extract_input_lines (%%),
     with_stdout (filename_mac,
                  for l in last (%%) do print (l)));

mogrify_wxmx_expr (expr) :=
    apply1 (expr, rule_split_mth);

matchdeclare (mm, lambda ([e%], op1(e%) = 'mth));
op1(e%) := if not atom(e%) then if not atom(op(e%)) then op1(op(e%)) else op(e%);

defrule (rule_split_mth, output () (mm), apply (output (), split_mth (mm)));

extract_ops (e, op1) :=
    block ([L: []],
           scanmap (lambda ([e1], if not atom(e1) and op(e1) = op1 then push (e1, L), e1), e),
           reverse (L));

/* MIGHT BE UNNEEDED !!
extract_outputs (e) :=
    block ([L: [], f],
           f: lambda ([e], if not atom(e) and not atom(op(e)) and op(op(e)) = 'output then push (e, L), e),
           scanmap (f, e),
           reverse (L));
 */

unix_single_line_terminator: ascii(10);
unix_double_line_terminator: sconcat (ascii(10), ascii(10));

dos_single_line_terminator: sconcat (ascii(13), ascii(10));
dos_double_line_terminator: sconcat (ascii(13), ascii(10), ascii(13), ascii(10));

wxmx_empty_lines: [ unix_single_line_terminator, unix_double_line_terminator, dos_single_line_terminator, dos_double_line_terminator ];

exclude_leaf_nodes (leaf_nodes, e) :=
    scanmap (lambda ([e1], if mapatom(e1) then e1 else apply (op(e1), sublist (args(e1), lambda ([e2], not member (e2, leaf_nodes))))), e, bottomup);

exclude_t_nodes (regex, e) :=
    scanmap (lambda ([e1], if mapatom(e1) then e1 else apply (op(e1), sublist (args(e1), lambda ([e2], match_t (regex, e2) = false)))), e, bottomup);

load ("sregex");

match_t (regex, e) :=
    not mapatom (e)
    and (op (e) = 't or (not atom (op (e)) and op (op (e)) = 't))
    and length (e) = 1
    and regex_match (regex, first (e)) # false;

partition_args (L, p) :=
    block ([L0: [], L1: []],
           for x in L do if p(x) = false then push (x, L0) else push (x, L1),
           [reverse (L0), reverse (L1)]);

markdown_from_expressions (e) :=
    (exclude_leaf_nodes (wxmx_empty_lines, e),
     exclude_t_nodes ("rat: replace .*", %%),
     markdown_from_expressions1 (%%));

markdown_from_expressions1 (e) :=
    for c in e do
        if op (op (c)) = 'cell
            then markdown_from_cell (c)
        elseif op (op (c)) = 'fold
            then markdown_from_expressions1 (c)
            else printf (true, "markdown_from_expressions: unrecognized top-level element; found: ~a(...)~%", op (c));

markdown_from_cell (c) :=
    block ([cell_type: assoc ("type", args (op (c)))],
           if cell_type = "title" or cell_type = "section" or cell_type = "subsection"
               then markdown_from_cell_section (first (c))
           elseif cell_type = "text"
               then markdown_from_cell_text (first (c))
           elseif cell_type = "code"
               then markdown_from_cell_code (first (first (c)), first (second (c)))
           else if cell_type = "pagebreak"
               then block () /* do nothing */
               else printf (true, "markdown_from_expressions: unrecognized type in cell; found: ~a(...)~%", op (c)));

markdown_from_cell_section (e) :=
    block ([level: parse_string (assoc ("sectioning_level", args (op (e)))),
            title_line: first (first (e))],
           printf (true, "~a ~a~%", apply (sconcat, makelist ("#", level)), title_line));

markdown_from_cell_text (e) :=
    block ([lines: map (first, args (e))],
           for l in lines do printf (true, "~a~%", l));

markdown_from_cell_code (input, output) :=
    block ([input_lines: map (first, args (input))],
           printf (true, "```{maxima}~%"),
           for l in input_lines
               do if l = false
                      then printf (true, "~%")
                      else printf (true, "~a~%", l),
           printf (true, "```~%"));

/* could probably largely merge different output flavors; just needs a little thought */

latex_from_expressions (e) :=
    block ([e1, e2],
           e1: exclude_leaf_nodes (wxmx_empty_lines, e),
           e2: exclude_t_nodes ("rat: replace .*", e1),
           printf (true, "\\documentclass{article}~%"),
           printf (true, "\\begin{document}~%"),
           latex_from_expressions1 (e2),
           printf (true, "\\end{document}~%"));

latex_from_expressions1 (e) :=
    for c in e do
        if op (op (c)) = 'cell
            then latex_from_cell (c)
        elseif op (op (c)) = 'fold
            then latex_from_expressions1 (c)
            else printf (true, "latex_from_expressions: unrecognized top-level element; found: ~a(...)~%", op (c));

latex_from_cell (c) :=
    block ([cell_type: assoc ("type", args (op (c)))],
           if cell_type = "title" or cell_type = "section" or cell_type = "subsection"
               then latex_from_cell_section (first (c))
           elseif cell_type = "text"
               then latex_from_cell_text (first (c))
           elseif cell_type = "code"
               then latex_from_cell_code (first (first (c)), first (second (c)))
           else if cell_type = "pagebreak"
               then block () /* do nothing */
               else printf (true, "latex_from_expressions: unrecognized type in cell; found: ~a(...)~%", op (c)));

latex_from_cell_section (e) :=
    block ([level: parse_string (assoc ("sectioning_level", args (op (e)))),
            title_line: first (first (e))],
           printf (true, "\\~asection{~a}~%", apply (sconcat, makelist ("sub", level - 1)), title_line));

latex_from_cell_text (e) :=
    block ([lines: map (first, args (e))],
           for l in lines do printf (true, "~a~%", l));

latex_from_cell_code (input, output) :=
    block ([input_lines: map (first, args (input))],
           printf (true, "\\begin{verbatim}~%"),
           for l in input_lines
               do if l = false
                      then printf (true, "~%")
                      else printf (true, "~a~%", l),
           printf (true, "\\end{verbatim}~%"));
