  
/* expressions_from_dom.mac -- process Maxima expressions constructed from DOM parsed from wxmx content XML
 *
 * Note that these pattern matching rules work only for
 * expressions created from wxMaxima wxmx <output> XML tags.
 * The goal is to construct a list of tokens which can then
 * be reassembled into the Maxima expression represented by
 * the wxmx output XML.
 *
 * copyright 2021 by Robert Dodier
 * I release this work under terms of the GNU General Public License
 */

load ("expressions_from_dom.lisp");

matchdeclare ([aa, bb, cc, dd,ee,ff,ele1,ele2,ele3,ele4,ele5,ele6], all);

defrule (rule_for_numbers, n()(aa), parse_string(aa));
defrule (rule_for_variables, v()(aa), ?makealias(aa));
defrule (rule_for_greek_variables, g()(aa), ?makealias(aa));
defrule (rule_for_symbols, s()(aa), ?makealias(aa));
defrule (rule_for_hidden_ops, h()(aa), ?makealias(aa));
defrule (rule_for_function_names, fnm()(aa), ?makealias(aa));
defrule (rule_for_functions, fn()(aa, bb), [aa, bb]);

paren_left: ?makealias("(");
paren_right: ?makealias (")");

square_bracket_left: ?makealias ("[");
square_bracket_right: ?makealias ("]");

defrule (rule_for_subscripts, i()(aa, bb),
         [aa, square_bracket_left, bb, square_bracket_right]);

caret: ?makealias("^");

defrule (rule_for_subsuperscripts, ie()(aa, bb, cc),
         [paren_left, aa, square_bracket_left, bb, square_bracket_right, caret, cc, paren_right]);

forward_slash: ?makealias("/");
defrule (rule_for_fractions, f()(aa, bb), [paren_left, aa, paren_right, forward_slash, paren_left, bb, paren_right]);

defrule (rule_for_exponents, e()(aa, bb), [paren_left, aa, paren_right, caret, paren_left, bb, paren_right]);

defrule (rule_for_text, t()(aa), ?makealias(aa));

matchdeclare (rr, lambda ([e], not atom(e) and op(e) = r()));
defrule (rule_for_rows, rr, args(rr)); /* TREAT <R> AS INVISIBLE PARENTHESES, THEREFORE INSERT $( $) HERE ?? */

matchdeclare (pp, lambda ([e], not atom(e) and op(e) = p()));
defrule (rule_for_parentheses, pp, [paren_left, args(pp), paren_right]);

apostrophe: ?makealias ("'");
comma: ?makealias (",");

defrule (rule_for_sums, sm("sum")(bb, cc, dd), process_sum_or_product ("sum", bb, cc, dd));
defrule (rule_for_lsums, sm("lsum")(bb, cc, dd), process_lsum (bb, cc, dd));
defrule (rule_for_products, sm("prod")(bb, cc, dd), process_sum_or_product ("product", bb, cc, dd));

process_sum_or_product (aa, bb, cc, dd) :=
 [apostrophe, ?makealias(aa), paren_left, dd, comma, first(bb), comma, third(bb), comma, cc, paren_right];

process_lsum (bb, cc, dd) :=
 block ([var: first (bb),
         list_values: rest (args (bb), 2)],
        append ([apostrophe, 'lsum, paren_left, dd, comma, var, comma], list_values, [paren_right]));

defrule (rule_for_sqrts, q()(aa), ['sqrt, paren_left, aa, paren_right]);
defrule (rule_for_strings, st()(aa), aa);

defrule(r1,e()(r()(v()(aa)), r()(n()(bb))) ,[aa,comma,bb]);
defrule(r2,v()(aa) ,[aa,comma,1]);

defrule (rule_for_diffs1, d()(f("yes")(aa, r()(s()("d"), h()("*"), ele1)), h()("*"), ff), additional_diff_analysis1(ff,ele1));
defrule (rule_for_diffs2, d()(f("yes")(aa, r()(s()("d"), h()("*"), ele1,h()("*"),s()("d"), h()("*"), ele2  )), h()("*"), ff), additional_diff_analysis2(ff,ele1,ele2));
defrule (rule_for_diffs3, d()(f("yes")(aa, r()(s()("d"), h()("*"), ele1,h()("*"),s()("d"), h()("*"), ele2 ,h()("*"),s()("d"), h()("*"), ele3   )), h()("*"), ff), additional_diff_analysis3(ff,ele1,ele2,ele3));
defrule (rule_for_diffs4, d()(f("yes")(aa, r()(s()("d"), h()("*"), ele1,h()("*"),s()("d"), h()("*"), ele2 ,h()("*"),s()("d"), h()("*"), ele3 ,h()("*"),s()("d"), h()("*"), ele4 )), h()("*"), ff), additional_diff_analysis4(ff,ele1,ele2,ele3,ele4));
defrule (rule_for_diffs5, d()(f("yes")(aa, r()(s()("d"), h()("*"), ele1,h()("*"),s()("d"), h()("*"), ele2 ,h()("*"),s()("d"), h()("*"), ele3 ,h()("*"),s()("d"), h()("*"), ele4 ,h()("*"),s()("d"), h()("*"), ele5  )), h()("*"), ff), additional_diff_analysis5(ff,ele1,ele2,ele3,ele4,ele5));
defrule (rule_for_diffs6, d()(f("yes")(aa, r()(s()("d"), h()("*"), ele1,h()("*"),s()("d"), h()("*"), ele2 ,h()("*"),s()("d"), h()("*"), ele3 ,h()("*"),s()("d"), h()("*"), ele4 ,h()("*"),s()("d"), h()("*"), ele5 ,h()("*"),s()("d"), h()("*"), ele6 )), h()("*"), ff), additional_diff_analysis6(ff,ele1,ele2,ele3,ele4,ele5,ele6));


additional_diff_analysis1 (ff,ele1) :=([apostrophe, 'diff, paren_left,ff,comma,apply1(ele1,r1,r2),paren_right]);
additional_diff_analysis2 (ff,ele1,ele2) :=([apostrophe, 'diff, paren_left,ff,comma,apply1(ele1,r1,r2),comma,apply1(ele2,r1,r2),paren_right]);
additional_diff_analysis3 (ff,ele1,ele2,ele3) :=([apostrophe, 'diff, paren_left,ff,comma,apply1(ele1,r1,r2),comma,apply1(ele2,r1,r2),comma,apply1(ele3,r1,r2),paren_right]);
additional_diff_analysis4 (ff,ele1,ele2,ele3,ele4) :=([apostrophe, 'diff, paren_left,ff,comma,apply1(ele1,r1,r2),comma,apply1(ele2,r1,r2),comma,apply1(ele3,r1,r2),comma,apply1(ele4,r1,r2),paren_right]);
additional_diff_analysis5 (ff,ele1,ele2,ele3,ele4,ele5) :=([apostrophe, 'diff, paren_left,ff,comma,apply1(ele1,r1,r2),comma,apply1(ele2,r1,r2),comma,apply1(ele3,r1,r2),comma,apply1(ele4,r1,r2),comma,apply1(ele5,r1,r2),paren_right]);
additional_diff_analysis6 (ff,ele1,ele2,ele3,ele4,ele5,ele6) :=([apostrophe, 'diff, paren_left,ff,comma,apply1(ele1,r1,r2),comma,apply1(ele2,r1,r2),comma,apply1(ele3,r1,r2),comma,apply1(ele4,r1,r2),comma,apply1(ele5,r1,r2),comma,apply1(ele6,r1,r2),paren_right]);

defrule(rule_for_abs ,a()(aa),['abs,paren_left,aa,paren_right]);

defrule(rule_for_conjugates ,cj()(aa),['conjugate,paren_left,aa,paren_right]);


defrule (rule_for_mtd, mtd()(aa), [comma,paren_left, aa, paren_right]);


matchdeclare (uu, lambda ([e], not atom(e) and op(e) = mtr()));
defrule (rule_for_mtr, uu, [comma,square_bracket_left, args(uu), square_bracket_right]);

matchdeclare (tt, lambda ([e], not atom(e) and op(e) = tb("true")));
defrule (rule_for_table, tt, ['matrix,paren_left, args(tt), paren_right]);



tokens_from (e%) :=
 (apply1 (e%,  
              rule_for_diffs1, 
              rule_for_diffs2, 
              rule_for_diffs3, 
              rule_for_diffs4, 
              rule_for_diffs5, 
              rule_for_diffs6, 
              rule_for_strings,
              rule_for_table,
              rule_for_mtr,
              rule_for_mtd,
              rule_for_subscripts,
              rule_for_subsuperscripts,
              rule_for_abs,
              rule_for_conjugates,
              rule_for_sums,
              rule_for_lsums,
              rule_for_products,
              rule_for_numbers,
              rule_for_variables,
              rule_for_greek_variables,
              rule_for_symbols,
              rule_for_hidden_ops,
              rule_for_function_names,
              rule_for_functions,
              rule_for_fractions,
              rule_for_exponents,
              rule_for_sqrts,
              rule_for_text,
              rule_for_rows,
              rule_for_parentheses),
  flatten (%%));

/* INCOMPLETE !!
scanmap (
mlabels_from_mth (e%) :=
 */
 
split_mth (e%) :=
  block ([aa: args (e%), ii, tokens, expr],
         ii: sublist_indices (aa, lambda ([e1], not atom(e1) and not atom(op(e1)) and op(op(e1)) = 'lbl )),
         ii: append (ii, [length (aa) + 1]),
         tokens: tokens_from (makelist (aa[i], i, ii[j] + 1, ii[j + 1] - 1)),
         errcatch (parse_token_list (tokens)),
         expr: if %% = [] then FAILED_TO_PARSE (tokens) else %%[1],
         makelist (?mlabel (strip_label (aa[ii[j]]), expr), j, 1, length (ii) - 1));

strip_label (x) :=
  block ([label: parse_string (first (x)), gensym_label],
         ?putprop (gensym_label: gensym (string (label)), label, ?reversealias),
         gensym_label);
