(if not ?fboundp ('distribute_over_tranches)
     then load ("distribute_over_tranches.lisp"),
 0);
0;

(kill (all),
 set_random_state (make_random_state (1234)),
 x: makelist (100000 + random (900000), 20),
 random_polynomial (l, m) :=
   apply ("+", makelist ((random (2*m) - m) * apply ("*", map ("^", l, makelist (random (m + 1), length (l)))), 2*m)),
 y: makelist (random_polynomial ([u, v, w], 3), 24),
 0);
0;

xbaz: map (ifactors, x);
[[[5, 2], [38791, 1]],
[[949171, 1]],
[[2, 1], [71, 2], [83, 1]],
[[3, 1], [5, 1], [211, 1], [281, 1]],
[[2, 2], [3, 5], [953, 1]],
[[2, 2], [7, 1], [13, 1], [19, 1], [29, 1]],
[[2, 3], [73, 1], [1523, 1]],
[[5, 5], [53, 1]],
[[5, 2], [79, 1], [137, 1]],
[[167, 1], [2087, 1]],
[[13, 1], [67411, 1]],
[[13, 1], [67757, 1]],
[[2, 1], [11, 1], [79, 1], [233, 1]],
[[2, 1], [31, 1], [6961, 1]],
[[7, 2], [29, 1], [503, 1]],
[[2, 1], [7, 1], [14153, 1]],
[[2, 2], [119299, 1]],
[[2, 2], [397, 1], [571, 1]],
[[2, 1], [101021, 1]],
[[2, 1], [7, 1], [22013, 1]]];

/* ''(factor(...)) to resimplify the result of factor,
 * otherwise expected and actual results don't match.
 * I think the nuttiness is in factor so I'm going to let it be.
 */
ybaz: ''(map (factor, y));
[-(3*u^2*v^2*w^3)+2*v*w^3-3*u^2*v^3*w^2-u^3*w-3,
-(v*(2*v^2*w^2+u^3*v^2-u^3*v-2*u^3)),
v*(v*w^3+2*u^3*w^3-w-3*v-2),
u*(u*v^3*w^3-3*u^2*w^3-2*v^2*w+u*v*w-u),
u^2*v*w^2*(u*w+2),
(u^3*v^3-u*v^2-3*u*v+1)*w,
-(2*u^2*v^2*w^3)+2*w^2-2*v^2-1,
2*u^2*v^2*w^3+v*w^3+u*v*w-2,
-(2*u^3*v^3*w^3)-2*v*w^3+3*u*v*w^2-2*u*w^2+2*u^3,
-(v^3*w^3)+2*u*v*w^2-u^3*v^3*w-u^2*v-2,
-(v^2*(u*v*w^3+2*u^3*w^3-2*u^2*v*w^2+w+u^3)),
2*u^2*v^2*w^3+2*u^2*w^3+u^2*v^3*w+v*w-2*u*v^3-2*u,
-(u*v^3*w^3)+2*u*w^3-u^3*v*w^2+2*u^3*w^2+2*v^3*w-3*u*v,
-(v*(u*v*w-w+2*u*v^2+v^2)),
-(w*(u*v*w^2-2*u^3*w^2+3*w-2*v^2+2*u*v)),
v*(u^2*v^2*w^3+2*u^2*v*w^3-2*u^3*v^2*w^2-3*v*w^2-2*u^2-3*u),
v^3*w^3-3*u^3*v^2*w^3+u^3*v*w^2-3*u^3*w^2-v^3-3*v^2,
-(w*(3*u^3*v^2*w^2-u^2*v-u^3-1)),
-(v^3*w^3)-2*u*v^2*w^2+2*u*w-u^3*v-u^3,
-(u^2*(u*v^2-1)*w^3),
u*(v^3*w^2-u*w^2-u*v^2*w-3*v^2*w-3*u*v^3-2*u*v),
2*u*w^3+u*v^3*w^2-2*w-u^2*v,
v*(u^3*v*w^3-2*v*w^2+2*u^3*w^2-3*u*v^2*w-3*u*v^2-2*u^2*v),
-(v*(u^3*v*w^2+3*u^2*w^2+3*u^2*v^2*w+2*v^2-v))];

distribute_over_tranches ('(ifactors (x[k])), k, length (x), 1);
''xbaz;

distribute_over_tranches ('(ifactors (x[k])), k, length (x), 2);
''xbaz;

distribute_over_tranches ('(ifactors (x[k])), k, length (x), 3);
''xbaz;

distribute_over_tranches ('(ifactors (x[k])), k, length (x), 7);
''xbaz;

distribute_over_tranches ('(ifactors (x[k])), k, length (x), 13);
''xbaz;

distribute_over_tranches ('(ifactors (x[k])), k, length (x), 20);
''xbaz;

distribute_over_tranches ('(ifactors (x[k])), k, length (x), 29);
''xbaz;

distribute_over_tranches ('(factor (y[n])), n, length (y), 1);
''ybaz;

distribute_over_tranches ('(factor (y[n])), n, length (y), 2);
''ybaz;

distribute_over_tranches ('(factor (y[n])), n, length (y), 3);
''ybaz;

distribute_over_tranches ('(factor (y[n])), n, length (y), 7);
''ybaz;

distribute_over_tranches ('(factor (y[n])), n, length (y), 13);
''ybaz;

distribute_over_tranches ('(factor (y[n])), n, length (y), 24);
''ybaz;

distribute_over_tranches ('(factor (y[n])), n, length (y), 29);
''ybaz;
